
ADDRESSABLE_LED_STRIP_WITH_IR_REMOTE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00001372  00001426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001372  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080017c  0080017c  000014a2  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000014a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00001540  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025e8  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c36  00000000  00000000  00003cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c1  00000000  00000000  0000490e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000378  00000000  00000000  00005bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000746  00000000  00000000  00005f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001296  00000000  00000000  0000668e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00007924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      68:	ec 01       	movw	r28, r24
      6a:	0f 02       	muls	r16, r31
      6c:	33 02       	muls	r19, r19
      6e:	56 02       	muls	r21, r22
      70:	79 02       	muls	r23, r25
      72:	9e 02       	muls	r25, r30
      74:	c1 02       	muls	r28, r17
      76:	e4 02       	muls	r30, r20
      78:	08 03       	fmul	r16, r16
      7a:	2b 03       	fmul	r18, r19

0000007c <__trampolines_end>:
      7c:	4f 4b       	sbci	r20, 0xBF	; 191
	...

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf ef       	ldi	r28, 0xFF	; 255
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	e2 e7       	ldi	r30, 0x72	; 114
      94:	f3 e1       	ldi	r31, 0x13	; 19
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	ac 37       	cpi	r26, 0x7C	; 124
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	ac e7       	ldi	r26, 0x7C	; 124
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 af 04 	call	0x95e	; 0x95e <main>
      b6:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <BusLinesState>:
	if (S_C == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (R_L == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	BusLinesState(&bus_data, 0);
}
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	00 d0       	rcall	.+0      	; 0xc8 <BusLinesState+0xa>
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	dc 01       	movw	r26, r24
      ce:	8c 91       	ld	r24, X
      d0:	98 2f       	mov	r25, r24
      d2:	92 95       	swap	r25
      d4:	9f 70       	andi	r25, 0x0F	; 15
      d6:	99 83       	std	Y+1, r25	; 0x01
      d8:	8f 70       	andi	r24, 0x0F	; 15
      da:	8a 83       	std	Y+2, r24	; 0x02
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8d c0       	rjmp	.+282    	; 0x1fa <BusLinesState+0x13c>
      e0:	33 23       	and	r19, r19
      e2:	19 f0       	breq	.+6      	; 0xea <BusLinesState+0x2c>
      e4:	31 30       	cpi	r19, 0x01	; 1
      e6:	41 f4       	brne	.+16     	; 0xf8 <BusLinesState+0x3a>
      e8:	04 c0       	rjmp	.+8      	; 0xf2 <BusLinesState+0x34>
      ea:	8e 01       	movw	r16, r28
      ec:	0f 5f       	subi	r16, 0xFF	; 255
      ee:	1f 4f       	sbci	r17, 0xFF	; 255
      f0:	03 c0       	rjmp	.+6      	; 0xf8 <BusLinesState+0x3a>
      f2:	8e 01       	movw	r16, r28
      f4:	0e 5f       	subi	r16, 0xFE	; 254
      f6:	1f 4f       	sbci	r17, 0xFF	; 255
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	3c c0       	rjmp	.+120    	; 0x174 <BusLinesState+0xb6>
      fc:	f8 01       	movw	r30, r16
      fe:	80 81       	ld	r24, Z
     100:	42 2f       	mov	r20, r18
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 2e       	mov	r0, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <BusLinesState+0x50>
     10a:	95 95       	asr	r25
     10c:	87 95       	ror	r24
     10e:	0a 94       	dec	r0
     110:	e2 f7       	brpl	.-8      	; 0x10a <BusLinesState+0x4c>
     112:	80 ff       	sbrs	r24, 0
     114:	17 c0       	rjmp	.+46     	; 0x144 <BusLinesState+0x86>
     116:	da 01       	movw	r26, r20
     118:	aa 0f       	add	r26, r26
     11a:	bb 1f       	adc	r27, r27
     11c:	ac 5f       	subi	r26, 0xFC	; 252
     11e:	be 4f       	sbci	r27, 0xFE	; 254
     120:	0d 90       	ld	r0, X+
     122:	bc 91       	ld	r27, X
     124:	a0 2d       	mov	r26, r0
     126:	40 50       	subi	r20, 0x00	; 0
     128:	5f 4f       	sbci	r21, 0xFF	; 255
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	fa 01       	movw	r30, r20
     130:	00 80       	ld	r0, Z
     132:	02 c0       	rjmp	.+4      	; 0x138 <BusLinesState+0x7a>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	0a 94       	dec	r0
     13a:	e2 f7       	brpl	.-8      	; 0x134 <BusLinesState+0x76>
     13c:	9c 91       	ld	r25, X
     13e:	89 2b       	or	r24, r25
     140:	8c 93       	st	X, r24
     142:	17 c0       	rjmp	.+46     	; 0x172 <BusLinesState+0xb4>
     144:	da 01       	movw	r26, r20
     146:	aa 0f       	add	r26, r26
     148:	bb 1f       	adc	r27, r27
     14a:	ac 5f       	subi	r26, 0xFC	; 252
     14c:	be 4f       	sbci	r27, 0xFE	; 254
     14e:	0d 90       	ld	r0, X+
     150:	bc 91       	ld	r27, X
     152:	a0 2d       	mov	r26, r0
     154:	40 50       	subi	r20, 0x00	; 0
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fa 01       	movw	r30, r20
     15e:	00 80       	ld	r0, Z
     160:	02 c0       	rjmp	.+4      	; 0x166 <BusLinesState+0xa8>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <BusLinesState+0xa4>
     16a:	80 95       	com	r24
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	8c 93       	st	X, r24
     172:	2f 5f       	subi	r18, 0xFF	; 255
     174:	24 30       	cpi	r18, 0x04	; 4
     176:	10 f2       	brcs	.-124    	; 0xfc <BusLinesState+0x3e>
     178:	61 11       	cpse	r22, r1
     17a:	0f c0       	rjmp	.+30     	; 0x19a <BusLinesState+0xdc>
     17c:	8b b1       	in	r24, 0x0b	; 11
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	8b b9       	out	0x0b, r24	; 11
     182:	fa e6       	ldi	r31, 0x6A	; 106
     184:	fa 95       	dec	r31
     186:	f1 f7       	brne	.-4      	; 0x184 <BusLinesState+0xc6>
     188:	00 c0       	rjmp	.+0      	; 0x18a <BusLinesState+0xcc>
     18a:	8b b1       	in	r24, 0x0b	; 11
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	8b b9       	out	0x0b, r24	; 11
     190:	8a e6       	ldi	r24, 0x6A	; 106
     192:	8a 95       	dec	r24
     194:	f1 f7       	brne	.-4      	; 0x192 <BusLinesState+0xd4>
     196:	00 c0       	rjmp	.+0      	; 0x198 <BusLinesState+0xda>
     198:	2f c0       	rjmp	.+94     	; 0x1f8 <BusLinesState+0x13a>
     19a:	61 30       	cpi	r22, 0x01	; 1
     19c:	c9 f4       	brne	.+50     	; 0x1d0 <BusLinesState+0x112>
     19e:	31 11       	cpse	r19, r1
     1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <BusLinesState+0xea>
     1a2:	8b b1       	in	r24, 0x0b	; 11
     1a4:	84 60       	ori	r24, 0x04	; 4
     1a6:	8b b9       	out	0x0b, r24	; 11
     1a8:	8b b1       	in	r24, 0x0b	; 11
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	8b b9       	out	0x0b, r24	; 11
     1ae:	9a e6       	ldi	r25, 0x6A	; 106
     1b0:	9a 95       	dec	r25
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <BusLinesState+0xf2>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <BusLinesState+0xf8>
     1b6:	8b b1       	in	r24, 0x0b	; 11
     1b8:	87 7f       	andi	r24, 0xF7	; 247
     1ba:	8b b9       	out	0x0b, r24	; 11
     1bc:	31 30       	cpi	r19, 0x01	; 1
     1be:	19 f4       	brne	.+6      	; 0x1c6 <BusLinesState+0x108>
     1c0:	8b b1       	in	r24, 0x0b	; 11
     1c2:	8b 7f       	andi	r24, 0xFB	; 251
     1c4:	8b b9       	out	0x0b, r24	; 11
     1c6:	aa e6       	ldi	r26, 0x6A	; 106
     1c8:	aa 95       	dec	r26
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <BusLinesState+0x10a>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <BusLinesState+0x110>
     1ce:	14 c0       	rjmp	.+40     	; 0x1f8 <BusLinesState+0x13a>
     1d0:	62 30       	cpi	r22, 0x02	; 2
     1d2:	91 f4       	brne	.+36     	; 0x1f8 <BusLinesState+0x13a>
     1d4:	8b b1       	in	r24, 0x0b	; 11
     1d6:	88 60       	ori	r24, 0x08	; 8
     1d8:	8b b9       	out	0x0b, r24	; 11
     1da:	ef e0       	ldi	r30, 0x0F	; 15
     1dc:	f7 e2       	ldi	r31, 0x27	; 39
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <BusLinesState+0x120>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <BusLinesState+0x126>
     1e4:	00 00       	nop
     1e6:	8b b1       	in	r24, 0x0b	; 11
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	8b b9       	out	0x0b, r24	; 11
     1ec:	8f e0       	ldi	r24, 0x0F	; 15
     1ee:	97 e2       	ldi	r25, 0x27	; 39
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <BusLinesState+0x132>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <BusLinesState+0x138>
     1f6:	00 00       	nop
     1f8:	3f 5f       	subi	r19, 0xFF	; 255
     1fa:	32 30       	cpi	r19, 0x02	; 2
     1fc:	08 f4       	brcc	.+2      	; 0x200 <BusLinesState+0x142>
     1fe:	70 cf       	rjmp	.-288    	; 0xe0 <BusLinesState+0x22>
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	08 95       	ret

0000020e <LCD_DisplEnable_CursOnOffBlink>:
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	98 e0       	ldi	r25, 0x08	; 8
     21a:	99 83       	std	Y+1, r25	; 0x01
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	11 f4       	brne	.+4      	; 0x224 <LCD_DisplEnable_CursOnOffBlink+0x16>
     220:	8c e0       	ldi	r24, 0x0C	; 12
     222:	89 83       	std	Y+1, r24	; 0x01
     224:	61 30       	cpi	r22, 0x01	; 1
     226:	21 f4       	brne	.+8      	; 0x230 <LCD_DisplEnable_CursOnOffBlink+0x22>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	89 83       	std	Y+1, r24	; 0x01
     22e:	03 c0       	rjmp	.+6      	; 0x236 <LCD_DisplEnable_CursOnOffBlink+0x28>
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	8d 7f       	andi	r24, 0xFD	; 253
     234:	89 83       	std	Y+1, r24	; 0x01
     236:	41 30       	cpi	r20, 0x01	; 1
     238:	21 f4       	brne	.+8      	; 0x242 <LCD_DisplEnable_CursOnOffBlink+0x34>
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	03 c0       	rjmp	.+6      	; 0x248 <LCD_DisplEnable_CursOnOffBlink+0x3a>
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <LCD_UserSymbolsWrite>:

void LCD_UserSymbolsWrite(uint8_t Addr, uint8_t *data)
{
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	7b 01       	movw	r14, r22
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
     26c:	88 0f       	add	r24, r24
     26e:	88 0f       	add	r24, r24
     270:	88 0f       	add	r24, r24
     272:	80 64       	ori	r24, 0x40	; 64
     274:	89 83       	std	Y+1, r24	; 0x01
	BusLinesState(&bus_data, 0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
	
	for (uint8_t i = 0; i < 8; i++)
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	08 c0       	rjmp	.+16     	; 0x294 <LCD_UserSymbolsWrite+0x3a>
	{
		BusLinesState(data, 1);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	c7 01       	movw	r24, r14
     288:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
		data++;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	e8 1a       	sub	r14, r24
     290:	f8 0a       	sbc	r15, r24
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 8; i++)
     292:	1f 5f       	subi	r17, 0xFF	; 255
     294:	18 30       	cpi	r17, 0x08	; 8
     296:	b0 f3       	brcs	.-20     	; 0x284 <LCD_UserSymbolsWrite+0x2a>
	{
		BusLinesState(data, 1);
		data++;
	}
}
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	08 95       	ret

000002a6 <LCD_Init>:
		}
	}
}

void LCD_Init(void)
{
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <LCD_Init+0x8>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	8f e2       	ldi	r24, 0x2F	; 47
     2b4:	95 e7       	ldi	r25, 0x75	; 117
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_Init+0x10>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Init+0x16>
     2bc:	00 00       	nop
	_delay_ms(15);
	
	uint8_t bus_data = 0b100000;
     2be:	80 e2       	ldi	r24, 0x20	; 32
     2c0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t empty_Init = 0x33;
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	8a 83       	std	Y+2, r24	; 0x02
	
	for (uint8_t i = 0; i < 2; i++)
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	13 c0       	rjmp	.+38     	; 0x2f0 <LCD_Init+0x4a>
	{
		if (i == 0)
     2ca:	11 11       	cpse	r17, r1
     2cc:	06 c0       	rjmp	.+12     	; 0x2da <LCD_Init+0x34>
		BusLinesState(&empty_Init, 0);
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	ce 01       	movw	r24, r28
     2d2:	02 96       	adiw	r24, 0x02	; 2
     2d4:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
     2d8:	0a c0       	rjmp	.+20     	; 0x2ee <LCD_Init+0x48>
		else if (i == 1)
     2da:	11 30       	cpi	r17, 0x01	; 1
     2dc:	41 f4       	brne	.+16     	; 0x2ee <LCD_Init+0x48>
		{
			empty_Init--;
     2de:	8a 81       	ldd	r24, Y+2	; 0x02
     2e0:	81 50       	subi	r24, 0x01	; 1
     2e2:	8a 83       	std	Y+2, r24	; 0x02
			BusLinesState(&empty_Init, 0);
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	ce 01       	movw	r24, r28
     2e8:	02 96       	adiw	r24, 0x02	; 2
     2ea:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
	_delay_ms(15);
	
	uint8_t bus_data = 0b100000;
	uint8_t empty_Init = 0x33;
	
	for (uint8_t i = 0; i < 2; i++)
     2ee:	1f 5f       	subi	r17, 0xFF	; 255
     2f0:	12 30       	cpi	r17, 0x02	; 2
     2f2:	58 f3       	brcs	.-42     	; 0x2ca <LCD_Init+0x24>
			BusLinesState(&empty_Init, 0);
		}
	}
	
	if (Data_Length == 1) Sbit(bus_data, 4);
	else Cbit(bus_data, 4);
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	8f 7e       	andi	r24, 0xEF	; 239
	if (NumberOfLines == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (Font == 1) Sbit(bus_data, 2);
     2f8:	8c 60       	ori	r24, 0x0C	; 12
     2fa:	89 83       	std	Y+1, r24	; 0x01
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
	
	for (uint8_t i = 0; i < 8; i++)
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	0e c0       	rjmp	.+28     	; 0x326 <LCD_Init+0x80>
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
     30a:	61 2f       	mov	r22, r17
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	66 0f       	add	r22, r22
     310:	77 1f       	adc	r23, r23
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	66 0f       	add	r22, r22
     318:	77 1f       	adc	r23, r23
     31a:	64 5f       	subi	r22, 0xF4	; 244
     31c:	7e 4f       	sbci	r23, 0xFE	; 254
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_UserSymbolsWrite>
	if (Font == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 8; i++)
     324:	1f 5f       	subi	r17, 0xFF	; 255
     326:	18 30       	cpi	r17, 0x08	; 8
     328:	80 f3       	brcs	.-32     	; 0x30a <LCD_Init+0x64>
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
}
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	08 95       	ret

00000336 <LCD_Show>:
		data++;
	}
}

void LCD_Show(uint8_t Addr, uint8_t Str, uint8_t Cursor)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <LCD_Show+0x6>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t x = 0;
	
	if (Str == 0)
     342:	61 11       	cpse	r22, r1
     344:	0c c0       	rjmp	.+24     	; 0x35e <LCD_Show+0x28>
	{
		x=FirstStr_StartPosition_DDRAM_Addr+Cursor;
     346:	40 58       	subi	r20, 0x80	; 128
     348:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
		BusLinesState(&Addr, 1);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	ce 01       	movw	r24, r28
     356:	02 96       	adiw	r24, 0x02	; 2
     358:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
     35c:	0e c0       	rjmp	.+28     	; 0x37a <LCD_Show+0x44>
	}
	else
	if (Str == 1)
     35e:	61 30       	cpi	r22, 0x01	; 1
     360:	61 f4       	brne	.+24     	; 0x37a <LCD_Show+0x44>
	{
		x=SecondStr_StartPosition_DDRAM_Addr+Cursor;
     362:	40 54       	subi	r20, 0x40	; 64
     364:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
		BusLinesState(&Addr, 1);
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	ce 01       	movw	r24, r28
     374:	02 96       	adiw	r24, 0x02	; 2
     376:	0e 94 5f 00 	call	0xbe	; 0xbe <BusLinesState>
	}
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <LCD_String>:

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	8c 01       	movw	r16, r24
     390:	f6 2e       	mov	r15, r22
     392:	d4 2f       	mov	r29, r20
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
     394:	c0 e0       	ldi	r28, 0x00	; 0
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <LCD_String+0x20>
	LCD_Show(str1[n], y, n + x);
     398:	4c 2f       	mov	r20, r28
     39a:	4d 0f       	add	r20, r29
     39c:	6f 2d       	mov	r22, r15
     39e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
}

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
     3a2:	cf 5f       	subi	r28, 0xFF	; 255
     3a4:	f8 01       	movw	r30, r16
     3a6:	ec 0f       	add	r30, r28
     3a8:	f1 1d       	adc	r31, r1
     3aa:	80 81       	ld	r24, Z
     3ac:	81 11       	cpse	r24, r1
     3ae:	f4 cf       	rjmp	.-24     	; 0x398 <LCD_String+0x14>
	LCD_Show(str1[n], y, n + x);
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	08 95       	ret

000003bc <drawBigDigits>:

void drawBigDigits(uint8_t digit, uint8_t place)
{
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
		switch (digit) {
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	8a 30       	cpi	r24, 0x0A	; 10
     3c6:	91 05       	cpc	r25, r1
     3c8:	08 f0       	brcs	.+2      	; 0x3cc <drawBigDigits+0x10>
     3ca:	67 c1       	rjmp	.+718    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
     3cc:	c6 2f       	mov	r28, r22
     3ce:	fc 01       	movw	r30, r24
     3d0:	ec 5c       	subi	r30, 0xCC	; 204
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__tablejump2__>
			case 0:

			LCD_Show(0, 0, place);
     3d8:	46 2f       	mov	r20, r22
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(1, 0, place + 1);
     3e2:	11 e0       	ldi	r17, 0x01	; 1
     3e4:	1c 0f       	add	r17, r28
     3e6:	41 2f       	mov	r20, r17
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     3f0:	d2 e0       	ldi	r29, 0x02	; 2
     3f2:	dc 0f       	add	r29, r28
     3f4:	4d 2f       	mov	r20, r29
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(3, 1, place);
     3fe:	4c 2f       	mov	r20, r28
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     408:	41 2f       	mov	r20, r17
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     412:	4d 2f       	mov	r20, r29
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     41c:	3e c1       	rjmp	.+636    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 1:
			LCD_Show(1, 0, place);
     41e:	46 2f       	mov	r20, r22
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 1);
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	1c 0f       	add	r17, r28
     42c:	41 2f       	mov	r20, r17
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_String(" ", 0, place + 2);
     436:	d2 e0       	ldi	r29, 0x02	; 2
     438:	dc 0f       	add	r29, r28
     43a:	4d 2f       	mov	r20, r29
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	8b e5       	ldi	r24, 0x5B	; 91
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
			LCD_Show(4, 1, place);
     446:	4c 2f       	mov	r20, r28
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(7, 1, place + 1);
     450:	41 2f       	mov	r20, r17
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 2);
     45a:	4d 2f       	mov	r20, r29
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     464:	1a c1       	rjmp	.+564    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 2:
			LCD_Show(6, 0, place);
     466:	46 2f       	mov	r20, r22
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     470:	11 e0       	ldi	r17, 0x01	; 1
     472:	1c 0f       	add	r17, r28
     474:	41 2f       	mov	r20, r17
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     47e:	d2 e0       	ldi	r29, 0x02	; 2
     480:	dc 0f       	add	r29, r28
     482:	4d 2f       	mov	r20, r29
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(3, 1, place);
     48c:	4c 2f       	mov	r20, r28
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     496:	41 2f       	mov	r20, r17
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	84 e0       	ldi	r24, 0x04	; 4
     49c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 2);
     4a0:	4d 2f       	mov	r20, r29
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     4aa:	f7 c0       	rjmp	.+494    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 3:
			LCD_Show(6, 0, place);
     4ac:	46 2f       	mov	r20, r22
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	86 e0       	ldi	r24, 0x06	; 6
     4b2:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     4b6:	11 e0       	ldi	r17, 0x01	; 1
     4b8:	1c 0f       	add	r17, r28
     4ba:	41 2f       	mov	r20, r17
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	86 e0       	ldi	r24, 0x06	; 6
     4c0:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     4c4:	d2 e0       	ldi	r29, 0x02	; 2
     4c6:	dc 0f       	add	r29, r28
     4c8:	4d 2f       	mov	r20, r29
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place);
     4d2:	4c 2f       	mov	r20, r28
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     4dc:	41 2f       	mov	r20, r17
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     4e6:	4d 2f       	mov	r20, r29
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     4f0:	d4 c0       	rjmp	.+424    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 4:
			LCD_Show(3, 0, place);
     4f2:	46 2f       	mov	r20, r22
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 0, place + 1);
     4fc:	11 e0       	ldi	r17, 0x01	; 1
     4fe:	1c 0f       	add	r17, r28
     500:	41 2f       	mov	r20, r17
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	84 e0       	ldi	r24, 0x04	; 4
     506:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(7, 0, place + 2);
     50a:	d2 e0       	ldi	r29, 0x02	; 2
     50c:	dc 0f       	add	r29, r28
     50e:	4d 2f       	mov	r20, r29
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	87 e0       	ldi	r24, 0x07	; 7
     514:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_String(" ", 1, place);
     518:	4c 2f       	mov	r20, r28
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	8b e5       	ldi	r24, 0x5B	; 91
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
			LCD_String(" ", 1, place + 1);
     524:	41 2f       	mov	r20, r17
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	8b e5       	ldi	r24, 0x5B	; 91
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
			LCD_Show(7, 1, place + 2);
     530:	4d 2f       	mov	r20, r29
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	87 e0       	ldi	r24, 0x07	; 7
     536:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     53a:	af c0       	rjmp	.+350    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 5:
			LCD_Show(3, 0, place);
     53c:	46 2f       	mov	r20, r22
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     546:	11 e0       	ldi	r17, 0x01	; 1
     548:	1c 0f       	add	r17, r28
     54a:	41 2f       	mov	r20, r17
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	86 e0       	ldi	r24, 0x06	; 6
     550:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 2);
     554:	d2 e0       	ldi	r29, 0x02	; 2
     556:	dc 0f       	add	r29, r28
     558:	4d 2f       	mov	r20, r29
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place);
     562:	4c 2f       	mov	r20, r28
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     56c:	41 2f       	mov	r20, r17
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	84 e0       	ldi	r24, 0x04	; 4
     572:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     576:	4d 2f       	mov	r20, r29
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	85 e0       	ldi	r24, 0x05	; 5
     57c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     580:	8c c0       	rjmp	.+280    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 6:
			LCD_Show(0, 0, place);
     582:	46 2f       	mov	r20, r22
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     58c:	11 e0       	ldi	r17, 0x01	; 1
     58e:	1c 0f       	add	r17, r28
     590:	41 2f       	mov	r20, r17
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 2);
     59a:	d2 e0       	ldi	r29, 0x02	; 2
     59c:	dc 0f       	add	r29, r28
     59e:	4d 2f       	mov	r20, r29
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(3, 1, place);
     5a8:	4c 2f       	mov	r20, r28
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     5b2:	41 2f       	mov	r20, r17
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     5bc:	4d 2f       	mov	r20, r29
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     5c6:	69 c0       	rjmp	.+210    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 7:
			LCD_Show(1, 0, place);
     5c8:	46 2f       	mov	r20, r22
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(1, 0, place + 1);
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	4c 0f       	add	r20, r28
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     5de:	d2 e0       	ldi	r29, 0x02	; 2
     5e0:	dc 0f       	add	r29, r28
     5e2:	4d 2f       	mov	r20, r29
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_String(" ", 1, place);
     5ec:	4c 2f       	mov	r20, r28
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	8b e5       	ldi	r24, 0x5B	; 91
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
			LCD_String(" ", 1, place + 2);
     5f8:	4d 2f       	mov	r20, r29
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8b e5       	ldi	r24, 0x5B	; 91
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
			LCD_Show(7, 1, place + 2);
     604:	4d 2f       	mov	r20, r29
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	87 e0       	ldi	r24, 0x07	; 7
     60a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     60e:	45 c0       	rjmp	.+138    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 8:
			LCD_Show(0, 0, place);
     610:	46 2f       	mov	r20, r22
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     61a:	11 e0       	ldi	r17, 0x01	; 1
     61c:	1c 0f       	add	r17, r28
     61e:	41 2f       	mov	r20, r17
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	86 e0       	ldi	r24, 0x06	; 6
     624:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     628:	d2 e0       	ldi	r29, 0x02	; 2
     62a:	dc 0f       	add	r29, r28
     62c:	4d 2f       	mov	r20, r29
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(3, 1, place);
     636:	4c 2f       	mov	r20, r28
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     640:	41 2f       	mov	r20, r17
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     64a:	4d 2f       	mov	r20, r29
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
     654:	22 c0       	rjmp	.+68     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
			
			case 9:
			LCD_Show(0, 0, place);
     656:	46 2f       	mov	r20, r22
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(6, 0, place + 1);
     660:	11 e0       	ldi	r17, 0x01	; 1
     662:	1c 0f       	add	r17, r28
     664:	41 2f       	mov	r20, r17
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	86 e0       	ldi	r24, 0x06	; 6
     66a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(2, 0, place + 2);
     66e:	d2 e0       	ldi	r29, 0x02	; 2
     670:	dc 0f       	add	r29, r28
     672:	4d 2f       	mov	r20, r29
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place);
     67c:	4c 2f       	mov	r20, r28
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(4, 1, place + 1);
     686:	41 2f       	mov	r20, r17
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			LCD_Show(5, 1, place + 2);
     690:	4d 2f       	mov	r20, r29
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Show>
			break;
		}
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	08 95       	ret

000006a2 <irrTimerInit>:
unsigned int time;
unsigned char protocolLetter;

void irrTimerInit()
{
	TIMER_INIT();
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	85 bd       	out	0x25, r24	; 37
	if (IR_ENABLE_PULLUP)
	IR_PORT |= _BV(IR_PIN_NUM);
     6a6:	85 b1       	in	r24, 0x05	; 5
     6a8:	84 60       	ori	r24, 0x04	; 4
     6aa:	85 b9       	out	0x05, r24	; 5
     6ac:	08 95       	ret

000006ae <irrProtocolNEC>:
	unsigned int time;
	unsigned char i;
	unsigned int invertedCode = 0;
	static unsigned int lastCode = 0;

	while (IR_HIGH);/*
     6ae:	1a 99       	sbic	0x03, 2	; 3
     6b0:	fe cf       	rjmp	.-4      	; 0x6ae <irrProtocolNEC>
	if (TIMER_REG > CONV(5000))
	return 0;*/

	time = TIMER_REG;
     6b2:	96 b5       	in	r25, 0x26	; 38
	TIMER_REG = 0;
     6b4:	16 bc       	out	0x26, r1	; 38

	PORTC ^= _BV(PINC5);
     6b6:	28 b1       	in	r18, 0x08	; 8
     6b8:	80 e2       	ldi	r24, 0x20	; 32
     6ba:	82 27       	eor	r24, r18
     6bc:	88 b9       	out	0x08, r24	; 8
	
	if (time > CONV(4200)) // 4200 us
     6be:	91 32       	cpi	r25, 0x21	; 33
     6c0:	40 f0       	brcs	.+16     	; 0x6d2 <irrProtocolNEC+0x24>
	{
		repeatCount = 0; // regular button press
     6c2:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <repeatCount>
unsigned int irrProtocolNEC(unsigned int code)
{
	unsigned char bitVal;
	unsigned int time;
	unsigned char i;
	unsigned int invertedCode = 0;
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
		return 0;
	}
	
	code = 0;
	
	for (i = 0; i < 32; i++) // Read 32 data bits
     6ca:	80 e0       	ldi	r24, 0x00	; 0
			return lastCode;
		}
		return 0;
	}
	
	code = 0;
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
	
	for (i = 0; i < 32; i++) // Read 32 data bits
     6d0:	32 c0       	rjmp	.+100    	; 0x736 <irrProtocolNEC+0x88>
	
	if (time > CONV(4200)) // 4200 us
	{
		repeatCount = 0; // regular button press
		} else {
		if (++repeatCount == NEC_REPEAT_RATE) // hold button press send last keycode
     6d2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <repeatCount>
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
     6d8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <repeatCount>
     6dc:	85 30       	cpi	r24, 0x05	; 5
     6de:	c9 f5       	brne	.+114    	; 0x752 <irrProtocolNEC+0xa4>
		{
			repeatCount = 0;
     6e0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <repeatCount>
			return lastCode;
     6e4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lastCode.2149>
     6e8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <lastCode.2149+0x1>
     6ec:	08 95       	ret
	
	code = 0;
	
	for (i = 0; i < 32; i++) // Read 32 data bits
	{
		while (IR_LOW);
     6ee:	1a 9b       	sbis	0x03, 2	; 3
     6f0:	fe cf       	rjmp	.-4      	; 0x6ee <irrProtocolNEC+0x40>
		/*	if (TIMER_REG > CONV(5000))
		return 0;*/
		while (IR_HIGH);/*
     6f2:	1a 99       	sbic	0x03, 2	; 3
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <irrProtocolNEC+0x44>
		if (TIMER_REG > CONV(5000))
		return 0;*/

		time = TIMER_REG;
     6f6:	96 b5       	in	r25, 0x26	; 38
		TIMER_REG = 0;
     6f8:	16 bc       	out	0x26, r1	; 38
		
		if (time > CONV(1650)) // 1650 us
     6fa:	9d 30       	cpi	r25, 0x0D	; 13
     6fc:	10 f0       	brcs	.+4      	; 0x702 <irrProtocolNEC+0x54>
		{
			bitVal = 1;
     6fe:	31 e0       	ldi	r19, 0x01	; 1
     700:	01 c0       	rjmp	.+2      	; 0x704 <irrProtocolNEC+0x56>
			} else {
			bitVal = 0;
     702:	30 e0       	ldi	r19, 0x00	; 0
		}

		PORTC ^= _BV(PINC5);
     704:	28 b1       	in	r18, 0x08	; 8
     706:	90 e2       	ldi	r25, 0x20	; 32
     708:	92 27       	eor	r25, r18
     70a:	98 b9       	out	0x08, r25	; 8
		
		if ((i < 8) || (i >= 16 && i < 24))
     70c:	88 30       	cpi	r24, 0x08	; 8
     70e:	20 f0       	brcs	.+8      	; 0x718 <irrProtocolNEC+0x6a>
     710:	90 ef       	ldi	r25, 0xF0	; 240
     712:	98 0f       	add	r25, r24
     714:	98 30       	cpi	r25, 0x08	; 8
     716:	18 f4       	brcc	.+6      	; 0x71e <irrProtocolNEC+0x70>
		{
			code = code << 1;
     718:	44 0f       	add	r20, r20
     71a:	55 1f       	adc	r21, r21
			code |= bitVal;
     71c:	43 2b       	or	r20, r19
		}

		if ((i >= 8 && i < 16) || (i >= 24 && i < 32))
     71e:	98 ef       	ldi	r25, 0xF8	; 248
     720:	98 0f       	add	r25, r24
     722:	98 30       	cpi	r25, 0x08	; 8
     724:	20 f0       	brcs	.+8      	; 0x72e <irrProtocolNEC+0x80>
     726:	98 ee       	ldi	r25, 0xE8	; 232
     728:	98 0f       	add	r25, r24
     72a:	98 30       	cpi	r25, 0x08	; 8
     72c:	18 f4       	brcc	.+6      	; 0x734 <irrProtocolNEC+0x86>
		{
			invertedCode = invertedCode << 1;
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
			invertedCode |= bitVal;
     732:	63 2b       	or	r22, r19
		return 0;
	}
	
	code = 0;
	
	for (i = 0; i < 32; i++) // Read 32 data bits
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 32       	cpi	r24, 0x20	; 32
     738:	d0 f2       	brcs	.-76     	; 0x6ee <irrProtocolNEC+0x40>
			invertedCode = invertedCode << 1;
			invertedCode |= bitVal;
		}
	}

	if (code != ~invertedCode)
     73a:	60 95       	com	r22
     73c:	70 95       	com	r23
     73e:	46 17       	cp	r20, r22
     740:	57 07       	cpc	r21, r23
     742:	51 f4       	brne	.+20     	; 0x758 <irrProtocolNEC+0xaa>
	return 0;

	lastCode = code;
     744:	50 93 82 01 	sts	0x0182, r21	; 0x800182 <lastCode.2149+0x1>
     748:	40 93 81 01 	sts	0x0181, r20	; 0x800181 <lastCode.2149>
	return code;
     74c:	84 2f       	mov	r24, r20
     74e:	95 2f       	mov	r25, r21
     750:	08 95       	ret
		if (++repeatCount == NEC_REPEAT_RATE) // hold button press send last keycode
		{
			repeatCount = 0;
			return lastCode;
		}
		return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	08 95       	ret
			invertedCode |= bitVal;
		}
	}

	if (code != ~invertedCode)
	return 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0

	lastCode = code;
	return code;
}
     75c:	08 95       	ret

0000075e <irrProtocolRC5>:

	unsigned char errorBit;

	code = 0;

	while (TIMER_REG < CONV(3160)); // 3160 us offset from the first pulse
     75e:	86 b5       	in	r24, 0x26	; 38
     760:	88 31       	cpi	r24, 0x18	; 24
     762:	e8 f3       	brcs	.-6      	; 0x75e <irrProtocolRC5>
	TIMER_REG = 0;
     764:	16 bc       	out	0x26, r1	; 38

	repeatBit = IR_VAL; // Read "repeat" bit
     766:	83 b1       	in	r24, 0x03	; 3
     768:	58 2f       	mov	r21, r24
     76a:	54 70       	andi	r21, 0x04	; 4
	PORTC ^= _BV(PINC5);
     76c:	98 b1       	in	r25, 0x08	; 8
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	89 27       	eor	r24, r25
     772:	88 b9       	out	0x08, r24	; 8

	// Move 1760us to the first data bit
	while (TIMER_REG < CONV(880));
     774:	86 b5       	in	r24, 0x26	; 38
     776:	86 30       	cpi	r24, 0x06	; 6
     778:	e8 f3       	brcs	.-6      	; 0x774 <irrProtocolRC5+0x16>
	TIMER_REG = 0;
     77a:	16 bc       	out	0x26, r1	; 38

	for (i = 0; i < 11; i++) // Read 12 data bits (5 address & 7 command)
     77c:	40 e0       	ldi	r20, 0x00	; 0
	static unsigned int lastCode = 0;
	static unsigned char lastRepeatBit = 0;

	unsigned char errorBit;

	code = 0;
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0

	// Move 1760us to the first data bit
	while (TIMER_REG < CONV(880));
	TIMER_REG = 0;

	for (i = 0; i < 11; i++) // Read 12 data bits (5 address & 7 command)
     782:	25 c0       	rjmp	.+74     	; 0x7ce <irrProtocolRC5+0x70>
	{
		code = code << 1;
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
		PORTC ^= _BV(PINC5);
     788:	98 b1       	in	r25, 0x08	; 8
     78a:	80 e2       	ldi	r24, 0x20	; 32
     78c:	89 27       	eor	r24, r25
     78e:	88 b9       	out	0x08, r24	; 8
		errorBit = IR_VAL;
     790:	93 b1       	in	r25, 0x03	; 3
     792:	94 70       	andi	r25, 0x04	; 4
		//TIMER_REG = 0;

		// Read second half of bit, which has to be inverted
		// so we check whether the code is ok

		while (errorBit == IR_VAL)
     794:	04 c0       	rjmp	.+8      	; 0x79e <irrProtocolRC5+0x40>
		if (TIMER_REG > CONV(1000))
     796:	86 b5       	in	r24, 0x26	; 38
     798:	88 30       	cpi	r24, 0x08	; 8
     79a:	08 f0       	brcs	.+2      	; 0x79e <irrProtocolRC5+0x40>
     79c:	3f c0       	rjmp	.+126    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		//TIMER_REG = 0;

		// Read second half of bit, which has to be inverted
		// so we check whether the code is ok

		while (errorBit == IR_VAL)
     79e:	83 b1       	in	r24, 0x03	; 3
     7a0:	84 70       	andi	r24, 0x04	; 4
     7a2:	98 17       	cp	r25, r24
     7a4:	c1 f3       	breq	.-16     	; 0x796 <irrProtocolRC5+0x38>
		if (TIMER_REG > CONV(1000))
		return 0;

		TIMER_REG = 0;
     7a6:	16 bc       	out	0x26, r1	; 38
		while (TIMER_REG < CONV(400));
     7a8:	86 b5       	in	r24, 0x26	; 38
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	e8 f3       	brcs	.-6      	; 0x7a8 <irrProtocolRC5+0x4a>
		TIMER_REG = 0;
     7ae:	16 bc       	out	0x26, r1	; 38

		PORTC ^= _BV(PINC5);
     7b0:	68 b1       	in	r22, 0x08	; 8
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	86 27       	eor	r24, r22
     7b6:	88 b9       	out	0x08, r24	; 8
		
		if (IR_VAL)
     7b8:	1a 99       	sbic	0x03, 2	; 3
		code |= 0x0001;
     7ba:	21 60       	ori	r18, 0x01	; 1

		if (IR_VAL && errorBit) // If the previous and current bit is the same - we have error code
     7bc:	1a 9b       	sbis	0x03, 2	; 3
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <irrProtocolRC5+0x66>
     7c0:	91 11       	cpse	r25, r1
     7c2:	2f c0       	rjmp	.+94     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		return 0;
		
		while (TIMER_REG < CONV(800));
     7c4:	86 b5       	in	r24, 0x26	; 38
     7c6:	86 30       	cpi	r24, 0x06	; 6
     7c8:	e8 f3       	brcs	.-6      	; 0x7c4 <irrProtocolRC5+0x66>
		TIMER_REG = 0;
     7ca:	16 bc       	out	0x26, r1	; 38

	// Move 1760us to the first data bit
	while (TIMER_REG < CONV(880));
	TIMER_REG = 0;

	for (i = 0; i < 11; i++) // Read 12 data bits (5 address & 7 command)
     7cc:	4f 5f       	subi	r20, 0xFF	; 255
     7ce:	4b 30       	cpi	r20, 0x0B	; 11
     7d0:	c8 f2       	brcs	.-78     	; 0x784 <irrProtocolRC5+0x26>
		
		while (TIMER_REG < CONV(800));
		TIMER_REG = 0;
	}

	if (code == lastCode && repeatBit == lastRepeatBit)
     7d2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <lastCode.2167>
     7d6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <lastCode.2167+0x1>
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	81 f4       	brne	.+32     	; 0x800 <__DATA_REGION_LENGTH__>
     7e0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lastRepeatBit.2168>
     7e4:	58 13       	cpse	r21, r24
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <__DATA_REGION_LENGTH__>
	{
		if (++repeatCount == RC5_REPEAT_RATE)
     7e8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <repeatCount>
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <repeatCount>
     7f2:	85 30       	cpi	r24, 0x05	; 5
     7f4:	c9 f4       	brne	.+50     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		{
			repeatCount = 0;
     7f6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <repeatCount>
			return code;
     7fa:	82 2f       	mov	r24, r18
     7fc:	93 2f       	mov	r25, r19
     7fe:	08 95       	ret
			} else {
			return 0;
		}
	}

	if (repeatBit != lastRepeatBit)
     800:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lastRepeatBit.2168>
     804:	58 13       	cpse	r21, r24
	{
		repeatCount = 0;
     806:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <repeatCount>
	}

	lastCode = code;
     80a:	30 93 80 01 	sts	0x0180, r19	; 0x800180 <lastCode.2167+0x1>
     80e:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <lastCode.2167>
	lastRepeatBit = repeatBit;
     812:	50 93 7e 01 	sts	0x017E, r21	; 0x80017e <lastRepeatBit.2168>
	return code;
     816:	82 2f       	mov	r24, r18
     818:	93 2f       	mov	r25, r19
     81a:	08 95       	ret
		// Read second half of bit, which has to be inverted
		// so we check whether the code is ok

		while (errorBit == IR_VAL)
		if (TIMER_REG > CONV(1000))
		return 0;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	08 95       	ret
		
		if (IR_VAL)
		code |= 0x0001;

		if (IR_VAL && errorBit) // If the previous and current bit is the same - we have error code
		return 0;
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	08 95       	ret
		if (++repeatCount == RC5_REPEAT_RATE)
		{
			repeatCount = 0;
			return code;
			} else {
			return 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
	}

	lastCode = code;
	lastRepeatBit = repeatBit;
	return code;
}
     82c:	08 95       	ret

0000082e <irrProtocolSIRC>:
	unsigned char i;
	static unsigned int lastCode = 0;

	code = 0;

	for (i = 0; i < 12; i++) // Read 32 data bits
     82e:	90 e0       	ldi	r25, 0x00	; 0
{
	unsigned int time;
	unsigned char i;
	static unsigned int lastCode = 0;

	code = 0;
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0

	for (i = 0; i < 12; i++) // Read 32 data bits
     834:	1b c0       	rjmp	.+54     	; 0x86c <irrProtocolSIRC+0x3e>
	{
		while (IR_LOW)
		if (TIMER_REG > CONV(2000))
     836:	86 b5       	in	r24, 0x26	; 38
     838:	80 31       	cpi	r24, 0x10	; 16
     83a:	a8 f5       	brcc	.+106    	; 0x8a6 <irrProtocolSIRC+0x78>

	code = 0;

	for (i = 0; i < 12; i++) // Read 32 data bits
	{
		while (IR_LOW)
     83c:	1a 9b       	sbis	0x03, 2	; 3
     83e:	fb cf       	rjmp	.-10     	; 0x836 <irrProtocolSIRC+0x8>
     840:	03 c0       	rjmp	.+6      	; 0x848 <irrProtocolSIRC+0x1a>
		if (TIMER_REG > CONV(2000))
		return 0;
		while (IR_HIGH)
		if (TIMER_REG > CONV(2000))
     842:	86 b5       	in	r24, 0x26	; 38
     844:	80 31       	cpi	r24, 0x10	; 16
     846:	90 f5       	brcc	.+100    	; 0x8ac <irrProtocolSIRC+0x7e>
	for (i = 0; i < 12; i++) // Read 32 data bits
	{
		while (IR_LOW)
		if (TIMER_REG > CONV(2000))
		return 0;
		while (IR_HIGH)
     848:	1a 99       	sbic	0x03, 2	; 3
     84a:	fb cf       	rjmp	.-10     	; 0x842 <irrProtocolSIRC+0x14>
		if (TIMER_REG > CONV(2000))
		return 0;

		time = TIMER_REG;
     84c:	46 b5       	in	r20, 0x26	; 38
     84e:	50 e0       	ldi	r21, 0x00	; 0
		TIMER_REG = 0;
     850:	16 bc       	out	0x26, r1	; 38

		if (time < CONV(400) || time > CONV(2000)) // error check - pulse length between 500-2000us
     852:	ba 01       	movw	r22, r20
     854:	63 50       	subi	r22, 0x03	; 3
     856:	71 09       	sbc	r23, r1
     858:	6d 30       	cpi	r22, 0x0D	; 13
     85a:	71 05       	cpc	r23, r1
     85c:	50 f5       	brcc	.+84     	; 0x8b2 <irrProtocolSIRC+0x84>
		return 0;

		code = code << 1;
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19

		if (time > CONV(1440)) // 1440 us
     862:	4c 30       	cpi	r20, 0x0C	; 12
     864:	51 05       	cpc	r21, r1
     866:	08 f0       	brcs	.+2      	; 0x86a <irrProtocolSIRC+0x3c>
		code |= 1;
     868:	21 60       	ori	r18, 0x01	; 1
	unsigned char i;
	static unsigned int lastCode = 0;

	code = 0;

	for (i = 0; i < 12; i++) // Read 32 data bits
     86a:	9f 5f       	subi	r25, 0xFF	; 255
     86c:	9c 30       	cpi	r25, 0x0C	; 12
     86e:	30 f3       	brcs	.-52     	; 0x83c <irrProtocolSIRC+0xe>

		if (time > CONV(1440)) // 1440 us
		code |= 1;
	}
	
	if (code == lastCode)
     870:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     874:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
     878:	28 17       	cp	r18, r24
     87a:	39 07       	cpc	r19, r25
     87c:	69 f4       	brne	.+26     	; 0x898 <irrProtocolSIRC+0x6a>
	{
		if ((repeatCount++) == SIRC_REPEAT_RATE)
     87e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <repeatCount>
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	98 0f       	add	r25, r24
     886:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <repeatCount>
     88a:	85 30       	cpi	r24, 0x05	; 5
     88c:	a9 f4       	brne	.+42     	; 0x8b8 <irrProtocolSIRC+0x8a>
		{
			repeatCount = 0;
     88e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <repeatCount>
			return code;
     892:	82 2f       	mov	r24, r18
     894:	93 2f       	mov	r25, r19
     896:	08 95       	ret
			} else {
			return 0;
		}
	}
	lastCode = code;
     898:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
     89c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
	return code;
     8a0:	82 2f       	mov	r24, r18
     8a2:	93 2f       	mov	r25, r19
     8a4:	08 95       	ret

	for (i = 0; i < 12; i++) // Read 32 data bits
	{
		while (IR_LOW)
		if (TIMER_REG > CONV(2000))
		return 0;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	08 95       	ret
		while (IR_HIGH)
		if (TIMER_REG > CONV(2000))
		return 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	08 95       	ret

		time = TIMER_REG;
		TIMER_REG = 0;

		if (time < CONV(400) || time > CONV(2000)) // error check - pulse length between 500-2000us
		return 0;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret
		if ((repeatCount++) == SIRC_REPEAT_RATE)
		{
			repeatCount = 0;
			return code;
			} else {
			return 0;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	lastCode = code;
	return code;
}
     8bc:	08 95       	ret

000008be <irrDecode>:
	IR_PORT |= _BV(IR_PIN_NUM);
}

unsigned int irrDecode()
{
	time = TIMER_REG;
     8be:	86 b5       	in	r24, 0x26	; 38
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <time+0x1>
     8c6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <time>
	TIMER_REG = 0;
     8ca:	16 bc       	out	0x26, r1	; 38

	if (time > CONV(9000) && time < CONV(9800)) { // Between 9ms and 9.8ms => NEC protocol
     8cc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time>
     8d0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time+0x1>
     8d4:	9c 01       	movw	r18, r24
     8d6:	27 54       	subi	r18, 0x47	; 71
     8d8:	31 09       	sbc	r19, r1
     8da:	25 30       	cpi	r18, 0x05	; 5
     8dc:	31 05       	cpc	r19, r1
     8de:	70 f4       	brcc	.+28     	; 0x8fc <irrDecode+0x3e>
		protocolLetter = 'N';
     8e0:	8e e4       	ldi	r24, 0x4E	; 78
     8e2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <protocolLetter>
		code = irrProtocolNEC(code);
     8e6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <code>
     8ea:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <code+0x1>
     8ee:	0e 94 57 03 	call	0x6ae	; 0x6ae <irrProtocolNEC>
     8f2:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <code+0x1>
     8f6:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <code>
     8fa:	28 c0       	rjmp	.+80     	; 0x94c <__stack+0x4d>

		} else if (time > CONV(800) && time < CONV(1200)) { // Between 0.8ms and 1.2ms => RC5 protocol
     8fc:	9c 01       	movw	r18, r24
     8fe:	27 50       	subi	r18, 0x07	; 7
     900:	31 09       	sbc	r19, r1
     902:	22 30       	cpi	r18, 0x02	; 2
     904:	31 05       	cpc	r19, r1
     906:	70 f4       	brcc	.+28     	; 0x924 <__stack+0x25>
		protocolLetter = 'R';
     908:	82 e5       	ldi	r24, 0x52	; 82
     90a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <protocolLetter>
		code = irrProtocolRC5(code);
     90e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <code>
     912:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <code+0x1>
     916:	0e 94 af 03 	call	0x75e	; 0x75e <irrProtocolRC5>
     91a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <code+0x1>
     91e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <code>
     922:	14 c0       	rjmp	.+40     	; 0x94c <__stack+0x4d>

		} else if (time > CONV(2000) && time < CONV(2800)) { // Between 2ms and 2.8ms => SIRC protocol
     924:	40 97       	sbiw	r24, 0x10	; 16
     926:	05 97       	sbiw	r24, 0x05	; 5
     928:	70 f4       	brcc	.+28     	; 0x946 <__stack+0x47>
		protocolLetter = 'S';
     92a:	83 e5       	ldi	r24, 0x53	; 83
     92c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <protocolLetter>
		code = irrProtocolSIRC(code);
     930:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <code>
     934:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <code+0x1>
     938:	0e 94 17 04 	call	0x82e	; 0x82e <irrProtocolSIRC>
     93c:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <code+0x1>
     940:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <code>
     944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0x4d>
		} else {
		protocolLetter = 'U';
     946:	85 e5       	ldi	r24, 0x55	; 85
     948:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <protocolLetter>
	}
	unsigned int decoded = code;
     94c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <code>
     950:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <code+0x1>
	code = 0;
     954:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <code+0x1>
     958:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <code>
	return (decoded);
}
     95c:	08 95       	ret

0000095e <main>:
//return 0;
//}


int main(void)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	2b 97       	sbiw	r28, 0x0b	; 11
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF; PORTD = 0x00;
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	8a b9       	out	0x0a, r24	; 10
     976:	1b b8       	out	0x0b, r1	; 11
	irrTimerInit();
     978:	0e 94 51 03 	call	0x6a2	; 0x6a2 <irrTimerInit>
	uartInit();
     97c:	0e 94 91 06 	call	0xd22	; 0xd22 <uartInit>
	LCD_Init();
     980:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_Init>
	TWI_Init();
     984:	0e 94 d7 05 	call	0xbae	; 0xbae <TWI_Init>
	
	
	LCD_DisplEnable_CursOnOffBlink(1, 0, 0);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_DisplEnable_CursOnOffBlink>
	LCD_String("                ", 0, 0);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8c e4       	ldi	r24, 0x4C	; 76
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("                ", 1, 0);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	8c e4       	ldi	r24, 0x4C	; 76
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	
	drawBigDigits(0, 0);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <drawBigDigits>
	drawBigDigits(1, 4);
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <drawBigDigits>
	drawBigDigits(2, 9);
     9ba:	69 e0       	ldi	r22, 0x09	; 9
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 de 01 	call	0x3bc	; 0x3bc <drawBigDigits>
	drawBigDigits(3, 13);
     9c2:	6d e0       	ldi	r22, 0x0D	; 13
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	0e 94 de 01 	call	0x3bc	; 0x3bc <drawBigDigits>
	
	LCD_String("+ ", 0, 7);
     9ca:	47 e0       	ldi	r20, 0x07	; 7
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	8d e5       	ldi	r24, 0x5D	; 93
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String(" +", 1, 7);
     9d6:	47 e0       	ldi	r20, 0x07	; 7
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	80 e6       	ldi	r24, 0x60	; 96
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("+", 1, 3);
     9e2:	43 e0       	ldi	r20, 0x03	; 3
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	81 e6       	ldi	r24, 0x61	; 97
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("+", 0, 12);
     9ee:	4c e0       	ldi	r20, 0x0C	; 12
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	81 e6       	ldi	r24, 0x61	; 97
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String(" ", 0, 3);
     9fa:	43 e0       	ldi	r20, 0x03	; 3
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	8b e5       	ldi	r24, 0x5B	; 91
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String(" ", 1, 12);
     a06:	4c e0       	ldi	r20, 0x0C	; 12
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	8b e5       	ldi	r24, 0x5B	; 91
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
     a12:	2f ef       	ldi	r18, 0xFF	; 255
     a14:	89 e6       	ldi	r24, 0x69	; 105
     a16:	98 e1       	ldi	r25, 0x18	; 24
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <main+0xba>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <main+0xc4>
     a22:	00 00       	nop
	
	_delay_ms(1000);
	
	LCD_String(" +", 0, 7);
     a24:	47 e0       	ldi	r20, 0x07	; 7
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	80 e6       	ldi	r24, 0x60	; 96
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("+ ", 1, 7);
     a30:	47 e0       	ldi	r20, 0x07	; 7
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	8d e5       	ldi	r24, 0x5D	; 93
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("+", 1, 3);
     a3c:	43 e0       	ldi	r20, 0x03	; 3
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	81 e6       	ldi	r24, 0x61	; 97
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String("+", 0, 12);
     a48:	4c e0       	ldi	r20, 0x0C	; 12
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	81 e6       	ldi	r24, 0x61	; 97
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String(" ", 0, 3);
     a54:	43 e0       	ldi	r20, 0x03	; 3
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	8b e5       	ldi	r24, 0x5B	; 91
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
	LCD_String(" ", 1, 12);
     a60:	4c e0       	ldi	r20, 0x0C	; 12
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	8b e5       	ldi	r24, 0x5B	; 91
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
     a6c:	2f ef       	ldi	r18, 0xFF	; 255
     a6e:	89 e6       	ldi	r24, 0x69	; 105
     a70:	98 e1       	ldi	r25, 0x18	; 24
     a72:	21 50       	subi	r18, 0x01	; 1
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	90 40       	sbci	r25, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <main+0x114>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <main+0x11e>
     a7c:	00 00       	nop
	
	_delay_ms(1000);

	savedCode = eeprom_read_word(&eeSavedCode);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <eeprom_read_word>
     a86:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <savedCode+0x1>
     a8a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <savedCode>
	
	while (1) {
		
		TWI_SendByteByADDR(0,0b11010000);
     a8e:	60 ed       	ldi	r22, 0xD0	; 208
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <TWI_SendByteByADDR>
     a96:	2f ef       	ldi	r18, 0xFF	; 255
     a98:	89 e6       	ldi	r24, 0x69	; 105
     a9a:	98 e1       	ldi	r25, 0x18	; 24
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	80 40       	sbci	r24, 0x00	; 0
     aa0:	90 40       	sbci	r25, 0x00	; 0
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <main+0x13e>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <main+0x148>
     aa6:	00 00       	nop
		_delay_ms(1000);
		TWI_StartCondition();
     aa8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TWI_StartCondition>
		TWI_SendByte(0b11010001);
     aac:	81 ed       	ldi	r24, 0xD1	; 209
     aae:	0e 94 e7 05 	call	0xbce	; 0xbce <TWI_SendByte>
		sec = TWI_ReadByte();
     ab2:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     ab6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <sec>
		min = TWI_ReadByte();
     aba:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     abe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <min>
		hour = TWI_ReadByte();
     ac2:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     ac6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <hour>
		day = TWI_ReadByte();
     aca:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     ace:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <day>
		date = TWI_ReadByte();
     ad2:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     ad6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <date>
		month = TWI_ReadByte();
     ada:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_ReadByte>
     ade:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <month>
		year = TWI_ReadLastByte();
     ae2:	0e 94 0c 06 	call	0xc18	; 0xc18 <TWI_ReadLastByte>
     ae6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <year>
		TWI_StopCondition();
     aea:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_StopCondition>
		//day = RTC_ConvertFromDec(day);
		//year = RTC_ConvertFromDec(year);
		//month = RTC_ConvertFromDec(month);
		//date = RTC_ConvertFromDec(date);
		
		uartTransmitHex(0, sec);
     aee:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <sec>
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 2a 06 	call	0xc54	; 0xc54 <uartTransmitHex>
		uartNewLine();
     afe:	0e 94 8a 06 	call	0xd14	; 0xd14 <uartNewLine>
		
		if (IR_HIGH)
     b02:	1a 9b       	sbis	0x03, 2	; 3
     b04:	c4 cf       	rjmp	.-120    	; 0xa8e <main+0x130>
		{
			
			unsigned int irrValueNow = irrDecode();
     b06:	0e 94 5f 04 	call	0x8be	; 0x8be <irrDecode>
     b0a:	8c 01       	movw	r16, r24
			
			if ((irrValueNow) && (irrValue != irrValueNow || irrDelayCount != secUpTime))
     b0c:	89 2b       	or	r24, r25
     b0e:	09 f4       	brne	.+2      	; 0xb12 <main+0x1b4>
     b10:	be cf       	rjmp	.-132    	; 0xa8e <main+0x130>
     b12:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <irrValue>
     b16:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <irrValue+0x1>
     b1a:	08 17       	cp	r16, r24
     b1c:	19 07       	cpc	r17, r25
     b1e:	61 f4       	brne	.+24     	; 0xb38 <main+0x1da>
     b20:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <irrDelayCount>
     b24:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <irrDelayCount+0x1>
     b28:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <secUpTime>
     b2c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <secUpTime+0x1>
     b30:	28 17       	cp	r18, r24
     b32:	39 07       	cpc	r19, r25
     b34:	09 f4       	brne	.+2      	; 0xb38 <main+0x1da>
     b36:	ab cf       	rjmp	.-170    	; 0xa8e <main+0x130>
			{
				irrDelayCount = secUpTime;
     b38:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <secUpTime>
     b3c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <secUpTime+0x1>
     b40:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <irrDelayCount+0x1>
     b44:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <irrDelayCount>
				uartTransmitHex(0, irrValueNow);
     b48:	a8 01       	movw	r20, r16
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 2a 06 	call	0xc54	; 0xc54 <uartTransmitHex>
				uartNewLine();
     b54:	0e 94 8a 06 	call	0xd14	; 0xd14 <uartNewLine>
				
				LCD_String("                ", 0, 0);
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	8c e4       	ldi	r24, 0x4C	; 76
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
				LCD_String("                ", 1, 0);
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	8c e4       	ldi	r24, 0x4C	; 76
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
				
				//LCD_String(snprintf(irrValueNow), 0, 0);
				
				char code_string[11];
				snprintf(code_string, 11, "CODE: 0x%02X ", irrValueNow);
     b70:	1f 93       	push	r17
     b72:	0f 93       	push	r16
     b74:	83 e6       	ldi	r24, 0x63	; 99
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	1f 92       	push	r1
     b7e:	8b e0       	ldi	r24, 0x0B	; 11
     b80:	8f 93       	push	r24
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	7c 01       	movw	r14, r24
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	0e 94 a9 06 	call	0xd52	; 0xd52 <snprintf>
				LCD_String(code_string, 0, 0);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	c7 01       	movw	r24, r14
     b96:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_String>
				
				if (irrValueNow == savedCode)
				{
					//clear
				}
				irrValue = irrValueNow;
     b9a:	10 93 8b 01 	sts	0x018B, r17	; 0x80018b <irrValue+0x1>
     b9e:	00 93 8a 01 	sts	0x018A, r16	; 0x80018a <irrValue>
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	70 cf       	rjmp	.-288    	; 0xa8e <main+0x130>

00000bae <TWI_Init>:
﻿#include "twi.h"

void TWI_Init (void)
{
	TWBR=0x20; // 100 khz at 8 mhz
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     bb4:	08 95       	ret

00000bb6 <TWI_StartCondition>:
}

void TWI_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     bb6:	84 ea       	ldi	r24, 0xA4	; 164
     bb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     bbc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bc0:	88 23       	and	r24, r24
     bc2:	e4 f7       	brge	.-8      	; 0xbbc <TWI_StartCondition+0x6>
}
     bc4:	08 95       	ret

00000bc6 <TWI_StopCondition>:

void TWI_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     bc6:	84 e9       	ldi	r24, 0x94	; 148
     bc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bcc:	08 95       	ret

00000bce <TWI_SendByte>:
}

void TWI_SendByte(unsigned char c)
{
	TWDR = c;
     bce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     bd2:	84 e8       	ldi	r24, 0x84	; 132
     bd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     bd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bdc:	88 23       	and	r24, r24
     bde:	e4 f7       	brge	.-8      	; 0xbd8 <TWI_SendByte+0xa>
}
     be0:	08 95       	ret

00000be2 <TWI_SendByteByADDR>:

void TWI_SendByteByADDR(unsigned char c,unsigned char addr)
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	c8 2f       	mov	r28, r24
     be8:	d6 2f       	mov	r29, r22
	TWI_StartCondition();
     bea:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TWI_StartCondition>
	TWI_SendByte(addr);
     bee:	8d 2f       	mov	r24, r29
     bf0:	0e 94 e7 05 	call	0xbce	; 0xbce <TWI_SendByte>
	TWI_SendByte(c);
     bf4:	8c 2f       	mov	r24, r28
     bf6:	0e 94 e7 05 	call	0xbce	; 0xbce <TWI_SendByte>
	TWI_StopCondition();
     bfa:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_StopCondition>
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <TWI_ReadByte>:

unsigned char TWI_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     c04:	84 ec       	ldi	r24, 0xC4	; 196
     c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     c0a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c0e:	88 23       	and	r24, r24
     c10:	e4 f7       	brge	.-8      	; 0xc0a <TWI_ReadByte+0x6>
	return TWDR;
     c12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     c16:	08 95       	ret

00000c18 <TWI_ReadLastByte>:

unsigned char TWI_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
     c18:	84 e8       	ldi	r24, 0x84	; 132
     c1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     c1e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c22:	88 23       	and	r24, r24
     c24:	e4 f7       	brge	.-8      	; 0xc1e <TWI_ReadLastByte+0x6>
	return TWDR;
     c26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     c2a:	08 95       	ret

00000c2c <uartTransmitByte>:
	return(data);
}

void uartTransmitByte(unsigned char data)
{ //	Function to transmit a single byte
	while (!(UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer */
     c2c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c30:	95 ff       	sbrs	r25, 5
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <uartTransmitByte>
	UDR0 = data; 			        /* Start transmition */
     c34:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c38:	08 95       	ret

00000c3a <uartTransmitString>:

	uartTransmitString (dataString);
}

void uartTransmitString(unsigned char* string)
{ // Function to transmit a string in RAM
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
	while (*string)
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <uartTransmitString+0xe>
	uartTransmitByte(*string++);
     c42:	21 96       	adiw	r28, 0x01	; 1
     c44:	0e 94 16 06 	call	0xc2c	; 0xc2c <uartTransmitByte>
	uartTransmitString (dataString);
}

void uartTransmitString(unsigned char* string)
{ // Function to transmit a string in RAM
	while (*string)
     c48:	88 81       	ld	r24, Y
     c4a:	81 11       	cpse	r24, r1
     c4c:	fa cf       	rjmp	.-12     	; 0xc42 <uartTransmitString+0x8>
	uartTransmitByte(*string++);
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <uartTransmitHex>:
	while (!(UCSR0A & (1<<UDRE0)));   /* Wait for empty transmit buffer */
	UDR0 = data; 			        /* Start transmition */
}

void uartTransmitHex(unsigned char dataType, unsigned long data)
{ // Function to transmit hex format data. first argument indicates type: CHAR, INT or LONG. Second argument is the data to be displayed
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	2b 97       	sbiw	r28, 0x0b	; 11
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";
     c68:	9b e0       	ldi	r25, 0x0B	; 11
     c6a:	e1 e7       	ldi	r30, 0x71	; 113
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	de 01       	movw	r26, r28
     c70:	11 96       	adiw	r26, 0x01	; 1
     c72:	01 90       	ld	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	9a 95       	dec	r25
     c78:	e1 f7       	brne	.-8      	; 0xc72 <uartTransmitHex+0x1e>

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	11 f0       	breq	.+4      	; 0xc82 <uartTransmitHex+0x2e>
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <uartTransmitHex+0x30>
     c82:	94 e0       	ldi	r25, 0x04	; 4
	if (dataType == LONG) count = 8;
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	31 f5       	brne	.+76     	; 0xcd4 <uartTransmitHex+0x80>
     c88:	98 e0       	ldi	r25, 0x08	; 8
     c8a:	24 c0       	rjmp	.+72     	; 0xcd4 <uartTransmitHex+0x80>

	for(i=count; i>0; i--)
	{
		temp = data % 16;
     c8c:	84 2f       	mov	r24, r20
     c8e:	8f 70       	andi	r24, 0x0F	; 15
		if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
     c90:	8a 30       	cpi	r24, 0x0A	; 10
     c92:	60 f4       	brcc	.+24     	; 0xcac <uartTransmitHex+0x58>
     c94:	e9 2f       	mov	r30, r25
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	31 96       	adiw	r30, 0x01	; 1
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	2c 0f       	add	r18, r28
     ca0:	3d 1f       	adc	r19, r29
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	80 5d       	subi	r24, 0xD0	; 208
     ca8:	80 83       	st	Z, r24
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <uartTransmitHex+0x6e>
		else dataString [i+1] = (temp - 10) + 0x41;
     cac:	e9 2f       	mov	r30, r25
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	31 96       	adiw	r30, 0x01	; 1
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	2c 0f       	add	r18, r28
     cb8:	3d 1f       	adc	r19, r29
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	89 5c       	subi	r24, 0xC9	; 201
     cc0:	80 83       	st	Z, r24

		data = data/16;
     cc2:	68 94       	set
     cc4:	13 f8       	bld	r1, 3
     cc6:	76 95       	lsr	r23
     cc8:	67 95       	ror	r22
     cca:	57 95       	ror	r21
     ccc:	47 95       	ror	r20
     cce:	16 94       	lsr	r1
     cd0:	d1 f7       	brne	.-12     	; 0xcc6 <uartTransmitHex+0x72>

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--)
     cd2:	91 50       	subi	r25, 0x01	; 1
     cd4:	91 11       	cpse	r25, r1
     cd6:	da cf       	rjmp	.-76     	; 0xc8c <uartTransmitHex+0x38>
		else dataString [i+1] = (temp - 10) + 0x41;

		data = data/16;
	}

	uartTransmitString (dataString);
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <uartTransmitString>
}
     ce0:	2b 96       	adiw	r28, 0x0b	; 11
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <uartTransmitString_F>:
	while (*string)
	uartTransmitByte(*string++);
}

void uartTransmitString_F(char* string)
{ // Function to transmit a string in Flash
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
	while (pgm_read_byte(&(*string)))
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <uartTransmitString_F+0x12>
	uartTransmitByte(pgm_read_byte(&(*string++)));
     cfa:	21 96       	adiw	r28, 0x01	; 1
     cfc:	fc 01       	movw	r30, r24
     cfe:	84 91       	lpm	r24, Z
     d00:	0e 94 16 06 	call	0xc2c	; 0xc2c <uartTransmitByte>
	uartTransmitByte(*string++);
}

void uartTransmitString_F(char* string)
{ // Function to transmit a string in Flash
	while (pgm_read_byte(&(*string)))
     d04:	ce 01       	movw	r24, r28
     d06:	fe 01       	movw	r30, r28
     d08:	24 91       	lpm	r18, Z
     d0a:	21 11       	cpse	r18, r1
     d0c:	f6 cf       	rjmp	.-20     	; 0xcfa <uartTransmitString_F+0x8>
	uartTransmitByte(pgm_read_byte(&(*string++)));
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <uartNewLine>:

void uartNewLine()
{
	TX_NEWLINE;
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	0e 94 16 06 	call	0xc2c	; 0xc2c <uartTransmitByte>
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
     d1c:	0e 94 16 06 	call	0xc2c	; 0xc2c <uartTransmitByte>
     d20:	08 95       	ret

00000d22 <uartInit>:


void uartInit()
{
	unsigned int ubrr = ((F_CPU/16)/(UART_BAUD+1));
	UBRR0H = (unsigned char)(ubrr>>8);
     d22:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     d26:	84 e3       	ldi	r24, 0x34	; 52
     d28:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     d2c:	88 e9       	ldi	r24, 0x98	; 152
     d2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C=(1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01)|(1<<USBS0);
     d32:	8e e8       	ldi	r24, 0x8E	; 142
     d34:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	uartTransmitString_F (PSTR("OK"));
     d38:	8c e7       	ldi	r24, 0x7C	; 124
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <uartTransmitString_F>
	uartNewLine();
     d40:	0e 94 8a 06 	call	0xd14	; 0xd14 <uartNewLine>
     d44:	08 95       	ret

00000d46 <__tablejump2__>:
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	05 90       	lpm	r0, Z+
     d4c:	f4 91       	lpm	r31, Z
     d4e:	e0 2d       	mov	r30, r0
     d50:	09 94       	ijmp

00000d52 <snprintf>:
     d52:	ae e0       	ldi	r26, 0x0E	; 14
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ef ea       	ldi	r30, 0xAF	; 175
     d58:	f6 e0       	ldi	r31, 0x06	; 6
     d5a:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__prologue_saves__+0x1c>
     d5e:	0d 89       	ldd	r16, Y+21	; 0x15
     d60:	1e 89       	ldd	r17, Y+22	; 0x16
     d62:	8f 89       	ldd	r24, Y+23	; 0x17
     d64:	98 8d       	ldd	r25, Y+24	; 0x18
     d66:	26 e0       	ldi	r18, 0x06	; 6
     d68:	2c 83       	std	Y+4, r18	; 0x04
     d6a:	1a 83       	std	Y+2, r17	; 0x02
     d6c:	09 83       	std	Y+1, r16	; 0x01
     d6e:	97 ff       	sbrs	r25, 7
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <snprintf+0x24>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e8       	ldi	r25, 0x80	; 128
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
     d7c:	ae 01       	movw	r20, r28
     d7e:	45 5e       	subi	r20, 0xE5	; 229
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	69 8d       	ldd	r22, Y+25	; 0x19
     d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <vfprintf>
     d8e:	4d 81       	ldd	r20, Y+5	; 0x05
     d90:	5e 81       	ldd	r21, Y+6	; 0x06
     d92:	57 fd       	sbrc	r21, 7
     d94:	0a c0       	rjmp	.+20     	; 0xdaa <snprintf+0x58>
     d96:	2f 81       	ldd	r18, Y+7	; 0x07
     d98:	38 85       	ldd	r19, Y+8	; 0x08
     d9a:	42 17       	cp	r20, r18
     d9c:	53 07       	cpc	r21, r19
     d9e:	0c f4       	brge	.+2      	; 0xda2 <snprintf+0x50>
     da0:	9a 01       	movw	r18, r20
     da2:	f8 01       	movw	r30, r16
     da4:	e2 0f       	add	r30, r18
     da6:	f3 1f       	adc	r31, r19
     da8:	10 82       	st	Z, r1
     daa:	2e 96       	adiw	r28, 0x0e	; 14
     dac:	e4 e0       	ldi	r30, 0x04	; 4
     dae:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__epilogue_restores__+0x1c>

00000db2 <vfprintf>:
     db2:	ab e0       	ldi	r26, 0x0B	; 11
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef ed       	ldi	r30, 0xDF	; 223
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__prologue_saves__>
     dbe:	6c 01       	movw	r12, r24
     dc0:	7b 01       	movw	r14, r22
     dc2:	8a 01       	movw	r16, r20
     dc4:	fc 01       	movw	r30, r24
     dc6:	17 82       	std	Z+7, r1	; 0x07
     dc8:	16 82       	std	Z+6, r1	; 0x06
     dca:	83 81       	ldd	r24, Z+3	; 0x03
     dcc:	81 ff       	sbrs	r24, 1
     dce:	cc c1       	rjmp	.+920    	; 0x1168 <vfprintf+0x3b6>
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	3c 01       	movw	r6, r24
     dd6:	f6 01       	movw	r30, r12
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	f7 01       	movw	r30, r14
     ddc:	93 fd       	sbrc	r25, 3
     dde:	85 91       	lpm	r24, Z+
     de0:	93 ff       	sbrs	r25, 3
     de2:	81 91       	ld	r24, Z+
     de4:	7f 01       	movw	r14, r30
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <vfprintf+0x3a>
     dea:	ba c1       	rjmp	.+884    	; 0x1160 <vfprintf+0x3ae>
     dec:	85 32       	cpi	r24, 0x25	; 37
     dee:	39 f4       	brne	.+14     	; 0xdfe <vfprintf+0x4c>
     df0:	93 fd       	sbrc	r25, 3
     df2:	85 91       	lpm	r24, Z+
     df4:	93 ff       	sbrs	r25, 3
     df6:	81 91       	ld	r24, Z+
     df8:	7f 01       	movw	r14, r30
     dfa:	85 32       	cpi	r24, 0x25	; 37
     dfc:	29 f4       	brne	.+10     	; 0xe08 <vfprintf+0x56>
     dfe:	b6 01       	movw	r22, r12
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
     e06:	e7 cf       	rjmp	.-50     	; 0xdd6 <vfprintf+0x24>
     e08:	91 2c       	mov	r9, r1
     e0a:	21 2c       	mov	r2, r1
     e0c:	31 2c       	mov	r3, r1
     e0e:	ff e1       	ldi	r31, 0x1F	; 31
     e10:	f3 15       	cp	r31, r3
     e12:	d8 f0       	brcs	.+54     	; 0xe4a <vfprintf+0x98>
     e14:	8b 32       	cpi	r24, 0x2B	; 43
     e16:	79 f0       	breq	.+30     	; 0xe36 <vfprintf+0x84>
     e18:	38 f4       	brcc	.+14     	; 0xe28 <vfprintf+0x76>
     e1a:	80 32       	cpi	r24, 0x20	; 32
     e1c:	79 f0       	breq	.+30     	; 0xe3c <vfprintf+0x8a>
     e1e:	83 32       	cpi	r24, 0x23	; 35
     e20:	a1 f4       	brne	.+40     	; 0xe4a <vfprintf+0x98>
     e22:	23 2d       	mov	r18, r3
     e24:	20 61       	ori	r18, 0x10	; 16
     e26:	1d c0       	rjmp	.+58     	; 0xe62 <vfprintf+0xb0>
     e28:	8d 32       	cpi	r24, 0x2D	; 45
     e2a:	61 f0       	breq	.+24     	; 0xe44 <vfprintf+0x92>
     e2c:	80 33       	cpi	r24, 0x30	; 48
     e2e:	69 f4       	brne	.+26     	; 0xe4a <vfprintf+0x98>
     e30:	23 2d       	mov	r18, r3
     e32:	21 60       	ori	r18, 0x01	; 1
     e34:	16 c0       	rjmp	.+44     	; 0xe62 <vfprintf+0xb0>
     e36:	83 2d       	mov	r24, r3
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	38 2e       	mov	r3, r24
     e3c:	e3 2d       	mov	r30, r3
     e3e:	e4 60       	ori	r30, 0x04	; 4
     e40:	3e 2e       	mov	r3, r30
     e42:	2a c0       	rjmp	.+84     	; 0xe98 <vfprintf+0xe6>
     e44:	f3 2d       	mov	r31, r3
     e46:	f8 60       	ori	r31, 0x08	; 8
     e48:	1d c0       	rjmp	.+58     	; 0xe84 <vfprintf+0xd2>
     e4a:	37 fc       	sbrc	r3, 7
     e4c:	2d c0       	rjmp	.+90     	; 0xea8 <vfprintf+0xf6>
     e4e:	20 ed       	ldi	r18, 0xD0	; 208
     e50:	28 0f       	add	r18, r24
     e52:	2a 30       	cpi	r18, 0x0A	; 10
     e54:	40 f0       	brcs	.+16     	; 0xe66 <vfprintf+0xb4>
     e56:	8e 32       	cpi	r24, 0x2E	; 46
     e58:	b9 f4       	brne	.+46     	; 0xe88 <vfprintf+0xd6>
     e5a:	36 fc       	sbrc	r3, 6
     e5c:	81 c1       	rjmp	.+770    	; 0x1160 <vfprintf+0x3ae>
     e5e:	23 2d       	mov	r18, r3
     e60:	20 64       	ori	r18, 0x40	; 64
     e62:	32 2e       	mov	r3, r18
     e64:	19 c0       	rjmp	.+50     	; 0xe98 <vfprintf+0xe6>
     e66:	36 fe       	sbrs	r3, 6
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0xc4>
     e6a:	8a e0       	ldi	r24, 0x0A	; 10
     e6c:	98 9e       	mul	r9, r24
     e6e:	20 0d       	add	r18, r0
     e70:	11 24       	eor	r1, r1
     e72:	92 2e       	mov	r9, r18
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <vfprintf+0xe6>
     e76:	ea e0       	ldi	r30, 0x0A	; 10
     e78:	2e 9e       	mul	r2, r30
     e7a:	20 0d       	add	r18, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	22 2e       	mov	r2, r18
     e80:	f3 2d       	mov	r31, r3
     e82:	f0 62       	ori	r31, 0x20	; 32
     e84:	3f 2e       	mov	r3, r31
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <vfprintf+0xe6>
     e88:	8c 36       	cpi	r24, 0x6C	; 108
     e8a:	21 f4       	brne	.+8      	; 0xe94 <vfprintf+0xe2>
     e8c:	83 2d       	mov	r24, r3
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	38 2e       	mov	r3, r24
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <vfprintf+0xe6>
     e94:	88 36       	cpi	r24, 0x68	; 104
     e96:	41 f4       	brne	.+16     	; 0xea8 <vfprintf+0xf6>
     e98:	f7 01       	movw	r30, r14
     e9a:	93 fd       	sbrc	r25, 3
     e9c:	85 91       	lpm	r24, Z+
     e9e:	93 ff       	sbrs	r25, 3
     ea0:	81 91       	ld	r24, Z+
     ea2:	7f 01       	movw	r14, r30
     ea4:	81 11       	cpse	r24, r1
     ea6:	b3 cf       	rjmp	.-154    	; 0xe0e <vfprintf+0x5c>
     ea8:	98 2f       	mov	r25, r24
     eaa:	9f 7d       	andi	r25, 0xDF	; 223
     eac:	95 54       	subi	r25, 0x45	; 69
     eae:	93 30       	cpi	r25, 0x03	; 3
     eb0:	28 f4       	brcc	.+10     	; 0xebc <vfprintf+0x10a>
     eb2:	0c 5f       	subi	r16, 0xFC	; 252
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	9f e3       	ldi	r25, 0x3F	; 63
     eb8:	99 83       	std	Y+1, r25	; 0x01
     eba:	0d c0       	rjmp	.+26     	; 0xed6 <vfprintf+0x124>
     ebc:	83 36       	cpi	r24, 0x63	; 99
     ebe:	31 f0       	breq	.+12     	; 0xecc <vfprintf+0x11a>
     ec0:	83 37       	cpi	r24, 0x73	; 115
     ec2:	71 f0       	breq	.+28     	; 0xee0 <vfprintf+0x12e>
     ec4:	83 35       	cpi	r24, 0x53	; 83
     ec6:	09 f0       	breq	.+2      	; 0xeca <vfprintf+0x118>
     ec8:	59 c0       	rjmp	.+178    	; 0xf7c <vfprintf+0x1ca>
     eca:	21 c0       	rjmp	.+66     	; 0xf0e <vfprintf+0x15c>
     ecc:	f8 01       	movw	r30, r16
     ece:	80 81       	ld	r24, Z
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	0e 5f       	subi	r16, 0xFE	; 254
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	88 24       	eor	r8, r8
     ed8:	83 94       	inc	r8
     eda:	91 2c       	mov	r9, r1
     edc:	53 01       	movw	r10, r6
     ede:	13 c0       	rjmp	.+38     	; 0xf06 <vfprintf+0x154>
     ee0:	28 01       	movw	r4, r16
     ee2:	f2 e0       	ldi	r31, 0x02	; 2
     ee4:	4f 0e       	add	r4, r31
     ee6:	51 1c       	adc	r5, r1
     ee8:	f8 01       	movw	r30, r16
     eea:	a0 80       	ld	r10, Z
     eec:	b1 80       	ldd	r11, Z+1	; 0x01
     eee:	36 fe       	sbrs	r3, 6
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <vfprintf+0x146>
     ef2:	69 2d       	mov	r22, r9
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <vfprintf+0x14a>
     ef8:	6f ef       	ldi	r22, 0xFF	; 255
     efa:	7f ef       	ldi	r23, 0xFF	; 255
     efc:	c5 01       	movw	r24, r10
     efe:	0e 94 c5 08 	call	0x118a	; 0x118a <strnlen>
     f02:	4c 01       	movw	r8, r24
     f04:	82 01       	movw	r16, r4
     f06:	f3 2d       	mov	r31, r3
     f08:	ff 77       	andi	r31, 0x7F	; 127
     f0a:	3f 2e       	mov	r3, r31
     f0c:	16 c0       	rjmp	.+44     	; 0xf3a <vfprintf+0x188>
     f0e:	28 01       	movw	r4, r16
     f10:	22 e0       	ldi	r18, 0x02	; 2
     f12:	42 0e       	add	r4, r18
     f14:	51 1c       	adc	r5, r1
     f16:	f8 01       	movw	r30, r16
     f18:	a0 80       	ld	r10, Z
     f1a:	b1 80       	ldd	r11, Z+1	; 0x01
     f1c:	36 fe       	sbrs	r3, 6
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <vfprintf+0x174>
     f20:	69 2d       	mov	r22, r9
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x178>
     f26:	6f ef       	ldi	r22, 0xFF	; 255
     f28:	7f ef       	ldi	r23, 0xFF	; 255
     f2a:	c5 01       	movw	r24, r10
     f2c:	0e 94 ba 08 	call	0x1174	; 0x1174 <strnlen_P>
     f30:	4c 01       	movw	r8, r24
     f32:	f3 2d       	mov	r31, r3
     f34:	f0 68       	ori	r31, 0x80	; 128
     f36:	3f 2e       	mov	r3, r31
     f38:	82 01       	movw	r16, r4
     f3a:	33 fc       	sbrc	r3, 3
     f3c:	1b c0       	rjmp	.+54     	; 0xf74 <vfprintf+0x1c2>
     f3e:	82 2d       	mov	r24, r2
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	88 16       	cp	r8, r24
     f44:	99 06       	cpc	r9, r25
     f46:	b0 f4       	brcc	.+44     	; 0xf74 <vfprintf+0x1c2>
     f48:	b6 01       	movw	r22, r12
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
     f52:	2a 94       	dec	r2
     f54:	f4 cf       	rjmp	.-24     	; 0xf3e <vfprintf+0x18c>
     f56:	f5 01       	movw	r30, r10
     f58:	37 fc       	sbrc	r3, 7
     f5a:	85 91       	lpm	r24, Z+
     f5c:	37 fe       	sbrs	r3, 7
     f5e:	81 91       	ld	r24, Z+
     f60:	5f 01       	movw	r10, r30
     f62:	b6 01       	movw	r22, r12
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
     f6a:	21 10       	cpse	r2, r1
     f6c:	2a 94       	dec	r2
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	82 1a       	sub	r8, r18
     f72:	91 08       	sbc	r9, r1
     f74:	81 14       	cp	r8, r1
     f76:	91 04       	cpc	r9, r1
     f78:	71 f7       	brne	.-36     	; 0xf56 <vfprintf+0x1a4>
     f7a:	e8 c0       	rjmp	.+464    	; 0x114c <vfprintf+0x39a>
     f7c:	84 36       	cpi	r24, 0x64	; 100
     f7e:	11 f0       	breq	.+4      	; 0xf84 <vfprintf+0x1d2>
     f80:	89 36       	cpi	r24, 0x69	; 105
     f82:	41 f5       	brne	.+80     	; 0xfd4 <vfprintf+0x222>
     f84:	f8 01       	movw	r30, r16
     f86:	37 fe       	sbrs	r3, 7
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <vfprintf+0x1e6>
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	0c 5f       	subi	r16, 0xFC	; 252
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <vfprintf+0x1f6>
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	07 2e       	mov	r0, r23
     f9e:	00 0c       	add	r0, r0
     fa0:	88 0b       	sbc	r24, r24
     fa2:	99 0b       	sbc	r25, r25
     fa4:	0e 5f       	subi	r16, 0xFE	; 254
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	f3 2d       	mov	r31, r3
     faa:	ff 76       	andi	r31, 0x6F	; 111
     fac:	3f 2e       	mov	r3, r31
     fae:	97 ff       	sbrs	r25, 7
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <vfprintf+0x212>
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	f0 68       	ori	r31, 0x80	; 128
     fc2:	3f 2e       	mov	r3, r31
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	a3 01       	movw	r20, r6
     fca:	0e 94 0c 09 	call	0x1218	; 0x1218 <__ultoa_invert>
     fce:	88 2e       	mov	r8, r24
     fd0:	86 18       	sub	r8, r6
     fd2:	45 c0       	rjmp	.+138    	; 0x105e <vfprintf+0x2ac>
     fd4:	85 37       	cpi	r24, 0x75	; 117
     fd6:	31 f4       	brne	.+12     	; 0xfe4 <vfprintf+0x232>
     fd8:	23 2d       	mov	r18, r3
     fda:	2f 7e       	andi	r18, 0xEF	; 239
     fdc:	b2 2e       	mov	r11, r18
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	25 c0       	rjmp	.+74     	; 0x102e <vfprintf+0x27c>
     fe4:	93 2d       	mov	r25, r3
     fe6:	99 7f       	andi	r25, 0xF9	; 249
     fe8:	b9 2e       	mov	r11, r25
     fea:	8f 36       	cpi	r24, 0x6F	; 111
     fec:	c1 f0       	breq	.+48     	; 0x101e <vfprintf+0x26c>
     fee:	18 f4       	brcc	.+6      	; 0xff6 <vfprintf+0x244>
     ff0:	88 35       	cpi	r24, 0x58	; 88
     ff2:	79 f0       	breq	.+30     	; 0x1012 <vfprintf+0x260>
     ff4:	b5 c0       	rjmp	.+362    	; 0x1160 <vfprintf+0x3ae>
     ff6:	80 37       	cpi	r24, 0x70	; 112
     ff8:	19 f0       	breq	.+6      	; 0x1000 <vfprintf+0x24e>
     ffa:	88 37       	cpi	r24, 0x78	; 120
     ffc:	21 f0       	breq	.+8      	; 0x1006 <vfprintf+0x254>
     ffe:	b0 c0       	rjmp	.+352    	; 0x1160 <vfprintf+0x3ae>
    1000:	e9 2f       	mov	r30, r25
    1002:	e0 61       	ori	r30, 0x10	; 16
    1004:	be 2e       	mov	r11, r30
    1006:	b4 fe       	sbrs	r11, 4
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <vfprintf+0x272>
    100a:	fb 2d       	mov	r31, r11
    100c:	f4 60       	ori	r31, 0x04	; 4
    100e:	bf 2e       	mov	r11, r31
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <vfprintf+0x272>
    1012:	34 fe       	sbrs	r3, 4
    1014:	0a c0       	rjmp	.+20     	; 0x102a <vfprintf+0x278>
    1016:	29 2f       	mov	r18, r25
    1018:	26 60       	ori	r18, 0x06	; 6
    101a:	b2 2e       	mov	r11, r18
    101c:	06 c0       	rjmp	.+12     	; 0x102a <vfprintf+0x278>
    101e:	28 e0       	ldi	r18, 0x08	; 8
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	05 c0       	rjmp	.+10     	; 0x102e <vfprintf+0x27c>
    1024:	20 e1       	ldi	r18, 0x10	; 16
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <vfprintf+0x27c>
    102a:	20 e1       	ldi	r18, 0x10	; 16
    102c:	32 e0       	ldi	r19, 0x02	; 2
    102e:	f8 01       	movw	r30, r16
    1030:	b7 fe       	sbrs	r11, 7
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <vfprintf+0x290>
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	0c 5f       	subi	r16, 0xFC	; 252
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	06 c0       	rjmp	.+12     	; 0x104e <vfprintf+0x29c>
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 5f       	subi	r16, 0xFE	; 254
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	a3 01       	movw	r20, r6
    1050:	0e 94 0c 09 	call	0x1218	; 0x1218 <__ultoa_invert>
    1054:	88 2e       	mov	r8, r24
    1056:	86 18       	sub	r8, r6
    1058:	fb 2d       	mov	r31, r11
    105a:	ff 77       	andi	r31, 0x7F	; 127
    105c:	3f 2e       	mov	r3, r31
    105e:	36 fe       	sbrs	r3, 6
    1060:	0d c0       	rjmp	.+26     	; 0x107c <vfprintf+0x2ca>
    1062:	23 2d       	mov	r18, r3
    1064:	2e 7f       	andi	r18, 0xFE	; 254
    1066:	a2 2e       	mov	r10, r18
    1068:	89 14       	cp	r8, r9
    106a:	58 f4       	brcc	.+22     	; 0x1082 <vfprintf+0x2d0>
    106c:	34 fe       	sbrs	r3, 4
    106e:	0b c0       	rjmp	.+22     	; 0x1086 <vfprintf+0x2d4>
    1070:	32 fc       	sbrc	r3, 2
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <vfprintf+0x2d4>
    1074:	83 2d       	mov	r24, r3
    1076:	8e 7e       	andi	r24, 0xEE	; 238
    1078:	a8 2e       	mov	r10, r24
    107a:	05 c0       	rjmp	.+10     	; 0x1086 <vfprintf+0x2d4>
    107c:	b8 2c       	mov	r11, r8
    107e:	a3 2c       	mov	r10, r3
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <vfprintf+0x2d6>
    1082:	b8 2c       	mov	r11, r8
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <vfprintf+0x2d6>
    1086:	b9 2c       	mov	r11, r9
    1088:	a4 fe       	sbrs	r10, 4
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <vfprintf+0x2f8>
    108c:	fe 01       	movw	r30, r28
    108e:	e8 0d       	add	r30, r8
    1090:	f1 1d       	adc	r31, r1
    1092:	80 81       	ld	r24, Z
    1094:	80 33       	cpi	r24, 0x30	; 48
    1096:	21 f4       	brne	.+8      	; 0x10a0 <vfprintf+0x2ee>
    1098:	9a 2d       	mov	r25, r10
    109a:	99 7e       	andi	r25, 0xE9	; 233
    109c:	a9 2e       	mov	r10, r25
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <vfprintf+0x300>
    10a0:	a2 fe       	sbrs	r10, 2
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <vfprintf+0x2fe>
    10a4:	b3 94       	inc	r11
    10a6:	b3 94       	inc	r11
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <vfprintf+0x300>
    10aa:	8a 2d       	mov	r24, r10
    10ac:	86 78       	andi	r24, 0x86	; 134
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <vfprintf+0x300>
    10b0:	b3 94       	inc	r11
    10b2:	a3 fc       	sbrc	r10, 3
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <vfprintf+0x326>
    10b6:	a0 fe       	sbrs	r10, 0
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <vfprintf+0x314>
    10ba:	b2 14       	cp	r11, r2
    10bc:	88 f4       	brcc	.+34     	; 0x10e0 <vfprintf+0x32e>
    10be:	28 0c       	add	r2, r8
    10c0:	92 2c       	mov	r9, r2
    10c2:	9b 18       	sub	r9, r11
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <vfprintf+0x330>
    10c6:	b2 14       	cp	r11, r2
    10c8:	60 f4       	brcc	.+24     	; 0x10e2 <vfprintf+0x330>
    10ca:	b6 01       	movw	r22, r12
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    10d4:	b3 94       	inc	r11
    10d6:	f7 cf       	rjmp	.-18     	; 0x10c6 <vfprintf+0x314>
    10d8:	b2 14       	cp	r11, r2
    10da:	18 f4       	brcc	.+6      	; 0x10e2 <vfprintf+0x330>
    10dc:	2b 18       	sub	r2, r11
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <vfprintf+0x332>
    10e0:	98 2c       	mov	r9, r8
    10e2:	21 2c       	mov	r2, r1
    10e4:	a4 fe       	sbrs	r10, 4
    10e6:	10 c0       	rjmp	.+32     	; 0x1108 <vfprintf+0x356>
    10e8:	b6 01       	movw	r22, r12
    10ea:	80 e3       	ldi	r24, 0x30	; 48
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    10f2:	a2 fe       	sbrs	r10, 2
    10f4:	17 c0       	rjmp	.+46     	; 0x1124 <vfprintf+0x372>
    10f6:	a1 fc       	sbrc	r10, 1
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <vfprintf+0x34e>
    10fa:	88 e7       	ldi	r24, 0x78	; 120
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x352>
    1100:	88 e5       	ldi	r24, 0x58	; 88
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	b6 01       	movw	r22, r12
    1106:	0c c0       	rjmp	.+24     	; 0x1120 <vfprintf+0x36e>
    1108:	8a 2d       	mov	r24, r10
    110a:	86 78       	andi	r24, 0x86	; 134
    110c:	59 f0       	breq	.+22     	; 0x1124 <vfprintf+0x372>
    110e:	a1 fe       	sbrs	r10, 1
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0x364>
    1112:	8b e2       	ldi	r24, 0x2B	; 43
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <vfprintf+0x366>
    1116:	80 e2       	ldi	r24, 0x20	; 32
    1118:	a7 fc       	sbrc	r10, 7
    111a:	8d e2       	ldi	r24, 0x2D	; 45
    111c:	b6 01       	movw	r22, r12
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    1124:	89 14       	cp	r8, r9
    1126:	38 f4       	brcc	.+14     	; 0x1136 <vfprintf+0x384>
    1128:	b6 01       	movw	r22, r12
    112a:	80 e3       	ldi	r24, 0x30	; 48
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    1132:	9a 94       	dec	r9
    1134:	f7 cf       	rjmp	.-18     	; 0x1124 <vfprintf+0x372>
    1136:	8a 94       	dec	r8
    1138:	f3 01       	movw	r30, r6
    113a:	e8 0d       	add	r30, r8
    113c:	f1 1d       	adc	r31, r1
    113e:	80 81       	ld	r24, Z
    1140:	b6 01       	movw	r22, r12
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    1148:	81 10       	cpse	r8, r1
    114a:	f5 cf       	rjmp	.-22     	; 0x1136 <vfprintf+0x384>
    114c:	22 20       	and	r2, r2
    114e:	09 f4       	brne	.+2      	; 0x1152 <vfprintf+0x3a0>
    1150:	42 ce       	rjmp	.-892    	; 0xdd6 <vfprintf+0x24>
    1152:	b6 01       	movw	r22, r12
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fputc>
    115c:	2a 94       	dec	r2
    115e:	f6 cf       	rjmp	.-20     	; 0x114c <vfprintf+0x39a>
    1160:	f6 01       	movw	r30, r12
    1162:	86 81       	ldd	r24, Z+6	; 0x06
    1164:	97 81       	ldd	r25, Z+7	; 0x07
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0x3ba>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	2b 96       	adiw	r28, 0x0b	; 11
    116e:	e2 e1       	ldi	r30, 0x12	; 18
    1170:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__epilogue_restores__>

00001174 <strnlen_P>:
    1174:	fc 01       	movw	r30, r24
    1176:	05 90       	lpm	r0, Z+
    1178:	61 50       	subi	r22, 0x01	; 1
    117a:	70 40       	sbci	r23, 0x00	; 0
    117c:	01 10       	cpse	r0, r1
    117e:	d8 f7       	brcc	.-10     	; 0x1176 <strnlen_P+0x2>
    1180:	80 95       	com	r24
    1182:	90 95       	com	r25
    1184:	8e 0f       	add	r24, r30
    1186:	9f 1f       	adc	r25, r31
    1188:	08 95       	ret

0000118a <strnlen>:
    118a:	fc 01       	movw	r30, r24
    118c:	61 50       	subi	r22, 0x01	; 1
    118e:	70 40       	sbci	r23, 0x00	; 0
    1190:	01 90       	ld	r0, Z+
    1192:	01 10       	cpse	r0, r1
    1194:	d8 f7       	brcc	.-10     	; 0x118c <strnlen+0x2>
    1196:	80 95       	com	r24
    1198:	90 95       	com	r25
    119a:	8e 0f       	add	r24, r30
    119c:	9f 1f       	adc	r25, r31
    119e:	08 95       	ret

000011a0 <fputc>:
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	fb 01       	movw	r30, r22
    11aa:	23 81       	ldd	r18, Z+3	; 0x03
    11ac:	21 fd       	sbrc	r18, 1
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <fputc+0x16>
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	2c c0       	rjmp	.+88     	; 0x120e <fputc+0x6e>
    11b6:	22 ff       	sbrs	r18, 2
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <fputc+0x46>
    11ba:	46 81       	ldd	r20, Z+6	; 0x06
    11bc:	57 81       	ldd	r21, Z+7	; 0x07
    11be:	24 81       	ldd	r18, Z+4	; 0x04
    11c0:	35 81       	ldd	r19, Z+5	; 0x05
    11c2:	42 17       	cp	r20, r18
    11c4:	53 07       	cpc	r21, r19
    11c6:	44 f4       	brge	.+16     	; 0x11d8 <fputc+0x38>
    11c8:	a0 81       	ld	r26, Z
    11ca:	b1 81       	ldd	r27, Z+1	; 0x01
    11cc:	9d 01       	movw	r18, r26
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	31 83       	std	Z+1, r19	; 0x01
    11d4:	20 83       	st	Z, r18
    11d6:	8c 93       	st	X, r24
    11d8:	26 81       	ldd	r18, Z+6	; 0x06
    11da:	37 81       	ldd	r19, Z+7	; 0x07
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	37 83       	std	Z+7, r19	; 0x07
    11e2:	26 83       	std	Z+6, r18	; 0x06
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <fputc+0x6e>
    11e6:	8b 01       	movw	r16, r22
    11e8:	ec 01       	movw	r28, r24
    11ea:	fb 01       	movw	r30, r22
    11ec:	00 84       	ldd	r0, Z+8	; 0x08
    11ee:	f1 85       	ldd	r31, Z+9	; 0x09
    11f0:	e0 2d       	mov	r30, r0
    11f2:	09 95       	icall
    11f4:	89 2b       	or	r24, r25
    11f6:	e1 f6       	brne	.-72     	; 0x11b0 <fputc+0x10>
    11f8:	d8 01       	movw	r26, r16
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	8d 91       	ld	r24, X+
    11fe:	9c 91       	ld	r25, X
    1200:	17 97       	sbiw	r26, 0x07	; 7
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	17 96       	adiw	r26, 0x07	; 7
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24
    120a:	16 97       	sbiw	r26, 0x06	; 6
    120c:	ce 01       	movw	r24, r28
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <__ultoa_invert>:
    1218:	fa 01       	movw	r30, r20
    121a:	aa 27       	eor	r26, r26
    121c:	28 30       	cpi	r18, 0x08	; 8
    121e:	51 f1       	breq	.+84     	; 0x1274 <__ultoa_invert+0x5c>
    1220:	20 31       	cpi	r18, 0x10	; 16
    1222:	81 f1       	breq	.+96     	; 0x1284 <__ultoa_invert+0x6c>
    1224:	e8 94       	clt
    1226:	6f 93       	push	r22
    1228:	6e 7f       	andi	r22, 0xFE	; 254
    122a:	6e 5f       	subi	r22, 0xFE	; 254
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	af 4f       	sbci	r26, 0xFF	; 255
    1234:	b1 e0       	ldi	r27, 0x01	; 1
    1236:	3e d0       	rcall	.+124    	; 0x12b4 <__ultoa_invert+0x9c>
    1238:	b4 e0       	ldi	r27, 0x04	; 4
    123a:	3c d0       	rcall	.+120    	; 0x12b4 <__ultoa_invert+0x9c>
    123c:	67 0f       	add	r22, r23
    123e:	78 1f       	adc	r23, r24
    1240:	89 1f       	adc	r24, r25
    1242:	9a 1f       	adc	r25, r26
    1244:	a1 1d       	adc	r26, r1
    1246:	68 0f       	add	r22, r24
    1248:	79 1f       	adc	r23, r25
    124a:	8a 1f       	adc	r24, r26
    124c:	91 1d       	adc	r25, r1
    124e:	a1 1d       	adc	r26, r1
    1250:	6a 0f       	add	r22, r26
    1252:	71 1d       	adc	r23, r1
    1254:	81 1d       	adc	r24, r1
    1256:	91 1d       	adc	r25, r1
    1258:	a1 1d       	adc	r26, r1
    125a:	20 d0       	rcall	.+64     	; 0x129c <__ultoa_invert+0x84>
    125c:	09 f4       	brne	.+2      	; 0x1260 <__ultoa_invert+0x48>
    125e:	68 94       	set
    1260:	3f 91       	pop	r19
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	26 9f       	mul	r18, r22
    1266:	11 24       	eor	r1, r1
    1268:	30 19       	sub	r19, r0
    126a:	30 5d       	subi	r19, 0xD0	; 208
    126c:	31 93       	st	Z+, r19
    126e:	de f6       	brtc	.-74     	; 0x1226 <__ultoa_invert+0xe>
    1270:	cf 01       	movw	r24, r30
    1272:	08 95       	ret
    1274:	46 2f       	mov	r20, r22
    1276:	47 70       	andi	r20, 0x07	; 7
    1278:	40 5d       	subi	r20, 0xD0	; 208
    127a:	41 93       	st	Z+, r20
    127c:	b3 e0       	ldi	r27, 0x03	; 3
    127e:	0f d0       	rcall	.+30     	; 0x129e <__ultoa_invert+0x86>
    1280:	c9 f7       	brne	.-14     	; 0x1274 <__ultoa_invert+0x5c>
    1282:	f6 cf       	rjmp	.-20     	; 0x1270 <__ultoa_invert+0x58>
    1284:	46 2f       	mov	r20, r22
    1286:	4f 70       	andi	r20, 0x0F	; 15
    1288:	40 5d       	subi	r20, 0xD0	; 208
    128a:	4a 33       	cpi	r20, 0x3A	; 58
    128c:	18 f0       	brcs	.+6      	; 0x1294 <__ultoa_invert+0x7c>
    128e:	49 5d       	subi	r20, 0xD9	; 217
    1290:	31 fd       	sbrc	r19, 1
    1292:	40 52       	subi	r20, 0x20	; 32
    1294:	41 93       	st	Z+, r20
    1296:	02 d0       	rcall	.+4      	; 0x129c <__ultoa_invert+0x84>
    1298:	a9 f7       	brne	.-22     	; 0x1284 <__ultoa_invert+0x6c>
    129a:	ea cf       	rjmp	.-44     	; 0x1270 <__ultoa_invert+0x58>
    129c:	b4 e0       	ldi	r27, 0x04	; 4
    129e:	a6 95       	lsr	r26
    12a0:	97 95       	ror	r25
    12a2:	87 95       	ror	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	ba 95       	dec	r27
    12aa:	c9 f7       	brne	.-14     	; 0x129e <__ultoa_invert+0x86>
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 05       	cpc	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	08 95       	ret
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	0a 2e       	mov	r0, r26
    12ba:	06 94       	lsr	r0
    12bc:	57 95       	ror	r21
    12be:	47 95       	ror	r20
    12c0:	37 95       	ror	r19
    12c2:	27 95       	ror	r18
    12c4:	ba 95       	dec	r27
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__ultoa_invert+0xa2>
    12c8:	62 0f       	add	r22, r18
    12ca:	73 1f       	adc	r23, r19
    12cc:	84 1f       	adc	r24, r20
    12ce:	95 1f       	adc	r25, r21
    12d0:	a0 1d       	adc	r26, r0
    12d2:	08 95       	ret

000012d4 <eeprom_read_word>:
    12d4:	a8 e1       	ldi	r26, 0x18	; 24
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	42 e0       	ldi	r20, 0x02	; 2
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <eeprom_read_blraw>

000012e0 <eeprom_read_block>:
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22

000012e4 <eeprom_read_blraw>:
    12e4:	fc 01       	movw	r30, r24
    12e6:	f9 99       	sbic	0x1f, 1	; 31
    12e8:	fe cf       	rjmp	.-4      	; 0x12e6 <eeprom_read_blraw+0x2>
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <eeprom_read_blraw+0x14>
    12ec:	f2 bd       	out	0x22, r31	; 34
    12ee:	e1 bd       	out	0x21, r30	; 33
    12f0:	f8 9a       	sbi	0x1f, 0	; 31
    12f2:	31 96       	adiw	r30, 0x01	; 1
    12f4:	00 b4       	in	r0, 0x20	; 32
    12f6:	0d 92       	st	X+, r0
    12f8:	41 50       	subi	r20, 0x01	; 1
    12fa:	50 40       	sbci	r21, 0x00	; 0
    12fc:	b8 f7       	brcc	.-18     	; 0x12ec <eeprom_read_blraw+0x8>
    12fe:	08 95       	ret

00001300 <__prologue_saves__>:
    1300:	2f 92       	push	r2
    1302:	3f 92       	push	r3
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	6f 92       	push	r6
    130a:	7f 92       	push	r7
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	ca 1b       	sub	r28, r26
    132a:	db 0b       	sbc	r29, r27
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	09 94       	ijmp

00001338 <__epilogue_restores__>:
    1338:	2a 88       	ldd	r2, Y+18	; 0x12
    133a:	39 88       	ldd	r3, Y+17	; 0x11
    133c:	48 88       	ldd	r4, Y+16	; 0x10
    133e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1340:	6e 84       	ldd	r6, Y+14	; 0x0e
    1342:	7d 84       	ldd	r7, Y+13	; 0x0d
    1344:	8c 84       	ldd	r8, Y+12	; 0x0c
    1346:	9b 84       	ldd	r9, Y+11	; 0x0b
    1348:	aa 84       	ldd	r10, Y+10	; 0x0a
    134a:	b9 84       	ldd	r11, Y+9	; 0x09
    134c:	c8 84       	ldd	r12, Y+8	; 0x08
    134e:	df 80       	ldd	r13, Y+7	; 0x07
    1350:	ee 80       	ldd	r14, Y+6	; 0x06
    1352:	fd 80       	ldd	r15, Y+5	; 0x05
    1354:	0c 81       	ldd	r16, Y+4	; 0x04
    1356:	1b 81       	ldd	r17, Y+3	; 0x03
    1358:	aa 81       	ldd	r26, Y+2	; 0x02
    135a:	b9 81       	ldd	r27, Y+1	; 0x01
    135c:	ce 0f       	add	r28, r30
    135e:	d1 1d       	adc	r29, r1
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	ed 01       	movw	r28, r26
    136c:	08 95       	ret

0000136e <_exit>:
    136e:	f8 94       	cli

00001370 <__stop_program>:
    1370:	ff cf       	rjmp	.-2      	; 0x1370 <__stop_program>
